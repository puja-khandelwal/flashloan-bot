{"version":3,"sources":["../../../src/index.tsx","component/SucessfullModal.jsx","component/Timer.jsx","views/pages/Auth/Verify/Index.jsx"],"names":["isStyleObject","obj","_a","_b","value","_c","numInputs","onChange","onPaste","renderInput","_d","shouldAutoFocus","_e","inputType","renderSeparator","placeholder","containerStyle","inputStyle","_f","skipDefaultStyles","useState","activeInput","setActiveInput","inputRefs","React","useRef","getOTPValue","toString","split","isInputNum","useEffect","current","slice","focus","getPlaceholderValue","length","console","error","isInputValueValid","isNaN","Number","trim","handleChange","event","target","changeCodeAtFocus","focusInput","handleInputChange","nativeEvent","some","cellInput","handleOTPChange","data","preventDefault","handleBlur","handleKeyDown","otp","code","key","includes","index","Math","max","min","select","otpValue","join","handlePaste","nextActiveInput","pastedData","clipboardData","getData","pos","shift","style","Object","assign","display","alignItems","className","undefined","Array","from","_","map","Fragment","ref","element","onFocus","handleFocus","onBlur","onKeyDown","autoComplete","width","textAlign","type","inputMode","onInput","useStyles","makeStyles","theme","suceesModalBox","color","fontSize","whiteSpace","lineHeight","fontWeight","height","marginBottom","SucessfullModal","open","handleClose","img","description","heading","classes","history","useHistory","Dialog","onClose","fullWidth","maxWidth","IconButton","onClick","position","right","top","cursor","size","DialogContent","Box","align","my","src","alt","mb","Typography","variant","DialogActions","Button","push","Timer","emailData","log","moment","add","unix","endTime","setEndTime","timeStamp","setTimeStamp","isUpdating","setIsUpdating","timer","setTimeout","calculateTimeLeft","timeLefts","window","localStorage","setItem","JSON","stringify","clearTimeout","handleResendOtpSubmit","a","postAPIHandler","endPoint","dataToSend","email","response","responseCode","removeItem","toast","success","responseMessage","timeLeft","useMemo","getItem","storedTimer","parsedTimer","parse","minutes","seconds","justifyContent","mt","ButtonCircularProgress","verifySection","zIndex","overflowY","margin","maxHeight","border","borderRadius","marginRight","background","marginTop","VerifyOtp","withdrawData","setOtp","isSubmit","setIsSubmit","location","useLocation","openSucessfullModal","setOpenSucessfullModal","handleFormSubmit","values","patchAPIHandler","state","pathname","token","result","Paper","elevation","autoFocus","props","secure","FormHelperText","disabled"],"mappings":"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","file":"static/js/39.aecf280a.chunk.js","sourcesContent":["import React from 'react';\n\ntype AllowedInputTypes = 'password' | 'text' | 'number' | 'tel';\n\ntype InputProps = Required<\n  Pick<\n    React.InputHTMLAttributes<HTMLInputElement>,\n    | 'value'\n    | 'onChange'\n    | 'onFocus'\n    | 'onBlur'\n    | 'onKeyDown'\n    | 'onPaste'\n    | 'aria-label'\n    | 'autoComplete'\n    | 'style'\n    | 'inputMode'\n    | 'onInput'\n  > & {\n    ref: React.RefCallback<HTMLInputElement>;\n    placeholder: string | undefined;\n    className: string | undefined;\n    type: AllowedInputTypes;\n  }\n>;\n\ninterface OTPInputProps {\n  /** Value of the OTP input */\n  value?: string;\n  /** Number of OTP inputs to be rendered */\n  numInputs?: number;\n  /** Callback to be called when the OTP value changes */\n  onChange: (otp: string) => void;\n  /** Callback to be called when pasting content into the component */\n  onPaste?: (event: React.ClipboardEvent<HTMLDivElement>) => void;\n  /** Function to render the input */\n  renderInput: (inputProps: InputProps, index: number) => React.ReactNode;\n  /** Whether the first input should be auto focused */\n  shouldAutoFocus?: boolean;\n  /** Placeholder for the inputs */\n  placeholder?: string;\n  /** Function to render the separator */\n  renderSeparator?: ((index: number) => React.ReactNode) | React.ReactNode;\n  /** Style for the container */\n  containerStyle?: React.CSSProperties | string;\n  /** Style for the input */\n  inputStyle?: React.CSSProperties | string;\n  /** The type that will be passed to the input being rendered */\n  inputType?: AllowedInputTypes;\n  /** Do not apply the default styles to the inputs, will be removed in future versions */\n  skipDefaultStyles?: boolean; // TODO: Remove in next major release\n}\n\nconst isStyleObject = (obj: unknown) => typeof obj === 'object' && obj !== null;\n\nconst OTPInput = ({\n  value = '',\n  numInputs = 4,\n  onChange,\n  onPaste,\n  renderInput,\n  shouldAutoFocus = false,\n  inputType = 'text',\n  renderSeparator,\n  placeholder,\n  containerStyle,\n  inputStyle,\n  skipDefaultStyles = false,\n}: OTPInputProps) => {\n  const [activeInput, setActiveInput] = React.useState(0);\n  const inputRefs = React.useRef<Array<HTMLInputElement | null>>([]);\n\n  const getOTPValue = () => (value ? value.toString().split('') : []);\n\n  const isInputNum = inputType === 'number' || inputType === 'tel';\n\n  React.useEffect(() => {\n    inputRefs.current = inputRefs.current.slice(0, numInputs);\n  }, [numInputs]);\n\n  React.useEffect(() => {\n    if (shouldAutoFocus) {\n      inputRefs.current[0]?.focus();\n    }\n  }, [shouldAutoFocus]);\n\n  const getPlaceholderValue = () => {\n    if (typeof placeholder === 'string') {\n      if (placeholder.length === numInputs) {\n        return placeholder;\n      }\n\n      if (placeholder.length > 0) {\n        console.error('Length of the placeholder should be equal to the number of inputs.');\n      }\n    }\n    return undefined;\n  };\n\n  const isInputValueValid = (value: string) => {\n    const isTypeValid = isInputNum ? !isNaN(Number(value)) : typeof value === 'string';\n    return isTypeValid && value.trim().length === 1;\n  };\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    if (isInputValueValid(value)) {\n      changeCodeAtFocus(value);\n      focusInput(activeInput + 1);\n    }\n  };\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { nativeEvent } = event;\n    const value = event.target.value;\n\n    if (!isInputValueValid(value)) {\n      // Pasting from the native autofill suggestion on a mobile device can pass\n      // the pasted string as one long input to one of the cells. This ensures\n      // that we handle the full input and not just the first character.\n      if (value.length === numInputs) {\n        const hasInvalidInput = value.split('').some((cellInput) => !isInputValueValid(cellInput));\n        if (!hasInvalidInput) {\n          handleOTPChange(value.split(''));\n          focusInput(numInputs - 1);\n        }\n      }\n\n      // @ts-expect-error - This was added previously to handle and edge case\n      // for dealing with keyCode \"229 Unidentified\" on Android. Check if this is\n      // still needed.\n      if (nativeEvent.data === null && nativeEvent.inputType === 'deleteContentBackward') {\n        event.preventDefault();\n        changeCodeAtFocus('');\n        focusInput(activeInput - 1);\n      }\n\n      // Clear the input if it's not valid value because firefox allows\n      // pasting non-numeric characters in a number type input\n      event.target.value = '';\n    }\n  };\n\n  const handleFocus = (event: React.FocusEvent<HTMLInputElement>) => (index: number) => {\n    setActiveInput(index);\n    event.target.select();\n  };\n\n  const handleBlur = () => {\n    setActiveInput(activeInput - 1);\n  };\n\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    const otp = getOTPValue();\n    if ([event.code, event.key].includes('Backspace')) {\n      event.preventDefault();\n      changeCodeAtFocus('');\n      focusInput(activeInput - 1);\n    } else if (event.code === 'Delete') {\n      event.preventDefault();\n      changeCodeAtFocus('');\n    } else if (event.code === 'ArrowLeft') {\n      event.preventDefault();\n      focusInput(activeInput - 1);\n    } else if (event.code === 'ArrowRight') {\n      event.preventDefault();\n      focusInput(activeInput + 1);\n    }\n    // React does not trigger onChange when the same value is entered\n    // again. So we need to focus the next input manually in this case.\n    else if (event.key === otp[activeInput]) {\n      event.preventDefault();\n      focusInput(activeInput + 1);\n    } else if (\n      event.code === 'Spacebar' ||\n      event.code === 'Space' ||\n      event.code === 'ArrowUp' ||\n      event.code === 'ArrowDown'\n    ) {\n      event.preventDefault();\n    }\n  };\n\n  const focusInput = (index: number) => {\n    const activeInput = Math.max(Math.min(numInputs - 1, index), 0);\n\n    if (inputRefs.current[activeInput]) {\n      inputRefs.current[activeInput]?.focus();\n      inputRefs.current[activeInput]?.select();\n      setActiveInput(activeInput);\n    }\n  };\n\n  const changeCodeAtFocus = (value: string) => {\n    const otp = getOTPValue();\n    otp[activeInput] = value[0];\n    handleOTPChange(otp);\n  };\n\n  const handleOTPChange = (otp: Array<string>) => {\n    const otpValue = otp.join('');\n    onChange(otpValue);\n  };\n\n  const handlePaste = (event: React.ClipboardEvent<HTMLInputElement>) => {\n    event.preventDefault();\n\n    const otp = getOTPValue();\n    let nextActiveInput = activeInput;\n\n    // Get pastedData in an array of max size (num of inputs - current position)\n    const pastedData = event.clipboardData\n      .getData('text/plain')\n      .slice(0, numInputs - activeInput)\n      .split('');\n\n    // Prevent pasting if the clipboard data contains non-numeric values for number inputs\n    if (isInputNum && pastedData.some((value) => isNaN(Number(value)))) {\n      return;\n    }\n\n    // Paste data from focused input onwards\n    for (let pos = 0; pos < numInputs; ++pos) {\n      if (pos >= activeInput && pastedData.length > 0) {\n        otp[pos] = pastedData.shift() ?? '';\n        nextActiveInput++;\n      }\n    }\n\n    focusInput(nextActiveInput);\n    handleOTPChange(otp);\n  };\n\n  return (\n    <div\n      style={Object.assign({ display: 'flex', alignItems: 'center' }, isStyleObject(containerStyle) && containerStyle)}\n      className={typeof containerStyle === 'string' ? containerStyle : undefined}\n      onPaste={onPaste}\n    >\n      {Array.from({ length: numInputs }, (_, index) => index).map((index) => (\n        <React.Fragment key={index}>\n          {renderInput(\n            {\n              value: getOTPValue()[index] ?? '',\n              placeholder: getPlaceholderValue()?.[index] ?? undefined,\n              ref: (element) => (inputRefs.current[index] = element),\n              onChange: handleChange,\n              onFocus: (event) => handleFocus(event)(index),\n              onBlur: handleBlur,\n              onKeyDown: handleKeyDown,\n              onPaste: handlePaste,\n              autoComplete: 'off',\n              'aria-label': `Please enter OTP character ${index + 1}`,\n              style: Object.assign(\n                !skipDefaultStyles ? ({ width: '1em', textAlign: 'center' } as const) : {},\n                isStyleObject(inputStyle) ? inputStyle : {}\n              ),\n              className: typeof inputStyle === 'string' ? inputStyle : undefined,\n              type: inputType,\n              inputMode: isInputNum ? 'numeric' : 'text',\n              onInput: handleInputChange,\n            },\n            index\n          )}\n          {index < numInputs - 1 && (typeof renderSeparator === 'function' ? renderSeparator(index) : renderSeparator)}\n        </React.Fragment>\n      ))}\n    </div>\n  );\n};\n\nexport type { OTPInputProps, InputProps, AllowedInputTypes };\nexport default OTPInput;\n","import React from \"react\";\nimport {\n  Typography,\n  Dialog,\n  DialogContent,\n  Box,\n  IconButton,\n  DialogActions,\n  Button,\n  makeStyles,\n} from \"@material-ui/core\";\nimport { useHistory } from \"react-router-dom\";\nimport { IoClose } from \"react-icons/io5\";\n\nconst useStyles = makeStyles((theme) => ({\n  suceesModalBox: {\n    \"& .payemntBox\": {\n      \"& h2\": {\n        color: \"rgba(61, 61, 61, 1)\",\n        fontSize: \"34px\",\n        textAlign: \"center\",\n        whiteSpace: \"pre\",\n        lineHeight: \"30px\",\n      },\n      \"& p\": {\n        color: \"rgba(61, 61, 61, 1)\",\n        fontWeight: 400,\n        textAlign: \"center\",\n      },\n      \"& .logoBox\": {\n        \"& img\": {\n          width: \"100%\",\n          height: \"50px\",\n          marginBottom: \"24px\",\n        },\n      },\n    },\n  },\n}));\nexport default function SucessfullModal({\n  open,\n  handleClose,\n  img,\n  description,\n  heading,\n}) {\n  const classes = useStyles();\n  const history = useHistory();\n  return (\n    <Dialog\n      open={open}\n      onClose={() => {\n        handleClose();\n      }}\n      fullWidth\n      maxWidth=\"xs\"\n    >\n      <IconButton\n        onClick={handleClose}\n        style={{\n          height: \"0px\",\n          position: \"absolute\",\n          right: \"10px\",\n          top: \"17px\",\n          cursor: \"pointer\",\n        }}\n      >\n        <IoClose color=\"primary\" size=\"17px\" />\n      </IconButton>\n\n      <DialogContent>\n        <Box className={classes.suceesModalBox}>\n          <Box className=\"payemntBox\" align=\"center\">\n            <Box className=\"displayColumn\">\n              <Box my={3} align=\"center\">\n                <img\n                  src={img}\n                  alt=\"sucess\"\n                  style={{ width: \"auto\", maxWidth: \"150px\" }}\n                />\n              </Box>\n              <Box mb={3}>\n                <Typography variant=\"h2\">{heading}</Typography>\n              </Box>\n              <Box mb={3}>\n                <Typography variant=\"body1\">{description}</Typography>\n              </Box>\n            </Box>\n          </Box>\n        </Box>\n      </DialogContent>\n      <DialogActions>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          fullWidth\n          style={{ marginBottom: \"16px\" }}\n          onClick={() => history.push(\"/auth/Login\")}\n        >\n          Ok\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n","import React, { useState, useEffect, useMemo } from \"react\";\nimport { Typography, Box, Button } from \"@material-ui/core\";\nimport moment from \"moment\";\nimport { calculateTimeLeft } from \"src/utils\";\nimport ButtonCircularProgress from \"./ButtonCircularProgress\";\nimport { toast } from \"react-toastify\";\nimport { postAPIHandler } from \"src/config/service\";\n\nexport default function Timer({ emailData }) {\n  console.log(\"emailData\", emailData);\n  const [endTime, setEndTime] = useState(moment().add(3, \"m\").unix());\n  const [timeStamp, setTimeStamp] = useState();\n  const [isUpdating, setIsUpdating] = useState(false);\n\n  useEffect(() => {\n    if (endTime) {\n      const timer = setTimeout(() => {\n        setTimeStamp(calculateTimeLeft(endTime * 1000));\n        const timeLefts = calculateTimeLeft(endTime * 1000);\n        window.localStorage.setItem(\"otpTimer\", JSON.stringify(timeLefts));\n      }, 1000);\n      return () => clearTimeout(timer);\n    }\n  });\n\n  const handleResendOtpSubmit = async () => {\n    try {\n      setIsUpdating(true);\n      const response = await postAPIHandler({\n        endPoint: \"resendOtp\",\n        dataToSend: {\n          email: emailData,\n        },\n      });\n      if (response?.data?.responseCode == 200) {\n        window.localStorage.removeItem(\"otpTimer\");\n        setEndTime(moment().add(3, \"m\").unix());\n        toast.success(response.data.responseMessage);\n      } else {\n        toast.error(response.data.responseMessage);\n      }\n      setIsUpdating(false);\n    } catch (error) {\n      setIsUpdating(false);\n      console.log(error);\n      toast.error(error?.response?.data?.responseMessage);\n    }\n  };\n\n  const timeLeft = useMemo(() => {\n    if (localStorage.getItem(\"otpTimer\")) {\n      const storedTimer = localStorage.getItem(\"otpTimer\");\n      const parsedTimer = JSON.parse(storedTimer);\n      !timeStamp &&\n        setEndTime(\n          moment()\n            .add(parsedTimer?.minutes, \"m\")\n            .add(parsedTimer?.seconds, \"s\")\n            .unix()\n        );\n      return parsedTimer;\n    }\n  }, [localStorage.getItem(\"otpTimer\")]);\n\n  return (\n    <Box display=\"flex\" justifyContent=\"flex-end\" mt={1}>\n      {timeLeft && timeLeft.seconds >= 0 ? (\n        <Typography variant=\"body2\">\n          {\" \"}\n          {timeLeft?.minutes} m : {timeLeft?.seconds} s\n        </Typography>\n      ) : (\n        <Button\n          onClick={() => handleResendOtpSubmit()}\n          style={{\n            color: \"#DE14FF\",\n            fontSize: \"16px\",\n            cursor: \"pointer\",\n          }}\n        >\n          Resend {isUpdating && <ButtonCircularProgress />}\n        </Button>\n      )}\n    </Box>\n  );\n}\n","import {\n  Box,\n  Button,\n  FormHelperText,\n  Paper,\n  Typography,\n  makeStyles,\n} from \"@material-ui/core\";\nimport React, { useContext, useState } from \"react\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport OtpInput from \"react-otp-input\";\n\nimport SucessfullModal from \"src/component/SucessfullModal\";\nimport { patchAPIHandler } from \"src/config/service\";\nimport { toast } from \"react-toastify\";\nimport ButtonCircularProgress from \"src/component/ButtonCircularProgress\";\nimport Timer from \"src/component/Timer\";\n\nconst useStyles = makeStyles((theme) => ({\n  verifySection: {\n    \"& .verifyMainBox\": {\n      height: \"100dvh\",\n      zIndex: \"999\",\n      position: \"relative\",\n      overflowY: \"auto\",\n      \"& p\": {\n        fontWeight: \"400\",\n        color: \"rgba(61, 61, 61, 1)\",\n      },\n      \"& h2\": {\n        color: \"rgba(61, 61, 61, 1)\",\n        fontSize: \"40px\",\n        textAlign: \"center\",\n      },\n      \"& .verifyBox\": {\n        height: \"initail\",\n        margin: \"0px auto\",\n        maxWidth: \"95%\",\n        width: \"550px\",\n        maxHeight: \"100%\",\n      },\n\n      \"& h6\": {\n        color: \"rgba(8, 5, 21, 1)\",\n        fontWeight: 500,\n      },\n      \"& .descriptionText\": {\n        \"& p\": {\n          color: \"rgba(61, 61, 61, 1)\",\n        },\n        \"& span\": {\n          fontWeight: 600,\n          color: \" rgba(255, 85, 0, 1)\",\n        },\n      },\n      \"& .logoBox\": {\n        \"& img\": {\n          width: \"auto\",\n          height: \"50px\",\n          marginBottom: \"24px\",\n        },\n      },\n      \"& input\": {\n        border: \"1px solid rgba(0, 0, 0, 0.1)\",\n        borderRadius: \"10px\",\n        fontSize: \"20px\",\n        height: \"50px !important\",\n        width: \"50px !important\",\n        marginRight: \"20px\",\n        background: \"#FFF\",\n        background: \"rgba(0, 0, 0, 0.02)\",\n        \"@media(max-width:460px)\": {\n          marginRight: \"5px\",\n          height: \"45px !important\",\n          width: \"45px !important\",\n        },\n      },\n      \"& .otpBox\": {\n        \"& p\": {\n          color: \"rgba(220, 4, 4, 1)\",\n          fontWeight: 300,\n          marginTop: \"8px\",\n          textAlign: \"end\",\n          marginRight: \"48px\",\n          \"@media(max-width:460px)\": {\n            marginRight: \"20px\",\n          },\n          \"@media(max-width:380px)\": {\n            marginRight: \"-10px\",\n          },\n        },\n      },\n      \"& .otpBox1\": {\n        \"& p\": {\n          color: \"rgba(220, 4, 4, 1)\",\n          fontWeight: 300,\n          marginTop: \"8px\",\n          textAlign: \"end\",\n          marginRight: \"20px\",\n          \"@media(max-width:460px)\": {\n            marginRight: \"20px\",\n          },\n          \"@media(max-width:380px)\": {\n            marginRight: \"-10px\",\n          },\n        },\n      },\n      \"& .resendBox\": {\n        color: \"rgba(43, 145, 239, 1)\",\n        fontWeight: 300,\n      },\n    },\n  },\n}));\n\nexport default function VerifyOtp({ type, handleClose, withdrawData }) {\n  const history = useHistory();\n  const classes = useStyles();\n  const [otp, setOtp] = useState(\"\");\n  const [isSubmit, setIsSubmit] = useState(false);\n  const location = useLocation();\n  const [isUpdating, setIsUpdating] = useState(false);\n  const [openSucessfullModal, setOpenSucessfullModal] = useState(false);\n  const handleFormSubmit = async (values) => {\n    try {\n      setIsUpdating(true);\n      const response = await patchAPIHandler({\n        endPoint: \"verifyOTP\",\n        dataToSend: {\n          email: location?.state?.email,\n          otp: otp,\n        },\n      });\n      if (response.data.responseCode === 200) {\n        toast.success(response.data.responseMessage);\n        location?.state?.type === \"FORGOT\"\n          ? history.push({\n              pathname: \"/Reset\",\n              state: { token: response?.data?.result?.token },\n            })\n          : history.push(\"/login\");\n      } else {\n        toast.error(response.data.responseMessage);\n      }\n      setIsUpdating(false);\n    } catch (error) {\n      setIsUpdating(false);\n    }\n  };\n  return (\n    <Box className={classes.verifySection}>\n      <Box className=\"verifyMainBox displayCenter\">\n        <Box className=\"verifyBox\">\n          <Paper elevation={2}>\n            <Box className=\"displayColumn\" align=\"center\">\n              <Box className=\"logoBox\" align=\"center\">\n                <img src=\"/images/emaillogo.png\" alt=\"Logo\" />\n              </Box>\n              <Typography variant=\"h2\">OTP Verification</Typography>\n              <Box className=\"displayCenter descriptionText\" align=\"center\">\n                <Typography variant=\"body1\" mt={2} textAlign=\"center\">\n                  {`Please enter the 6 digit verification code that was sent to\n                  ${\n                    location?.state && location?.state?.email\n                  } . The code is valid for 1 minute.`}\n                </Typography>\n              </Box>\n            </Box>\n            <Box>\n              <Box className=\"displayCenter\" mt={3}>\n                <OtpInput\n                  className=\"otpInput\"\n                  value={otp}\n                  onChange={setOtp}\n                  numInputs={6}\n                  autoFocus={false}\n                  inputType=\"number\"\n                  renderInput={(props) => <input {...props} />}\n                  secure\n                />\n              </Box>\n              <Box className=\"displaySpacebetween\">\n                <FormHelperText error>\n                  {isSubmit && otp.length !== 6 && \"Please enter valid otp.\"}\n                </FormHelperText>\n                <Box style={{ width: \"100%\" }}>\n                  <Timer emailData={location?.state?.email} />\n                </Box>\n              </Box>\n            </Box>\n            <Box mb={2} mt={3} className=\"displayCenter\">\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                fullWidth\n                // onClick={() => {\n                //   handleFormSubmit();\n                // }}\n                onClick={() => {\n                  setIsSubmit(true);\n                  if (otp.length === 6) {\n                    handleFormSubmit();\n                    setIsSubmit(true);\n                  }\n                }}\n                disabled={isUpdating}\n              >\n                Submit\n                {isUpdating && <ButtonCircularProgress />}\n              </Button>\n            </Box>\n          </Paper>\n        </Box>\n        {openSucessfullModal && (\n          <SucessfullModal\n            open={openSucessfullModal}\n            img={\"/images/successfull.png\"}\n            heading=\"Registration Confirmation!\"\n            description={`Thank you for choosing to join us. We're almost there. We will reach out to you as soon as your details have been verified.`}\n            handleClose={() => {\n              setOpenSucessfullModal(false);\n              history.push(\"/login\");\n            }}\n          />\n        )}\n      </Box>\n      {/* {isVerifying && <PageLoader />} */}\n    </Box>\n  );\n}\n"],"sourceRoot":""}