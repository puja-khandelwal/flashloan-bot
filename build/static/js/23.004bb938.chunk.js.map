{"version":3,"sources":["views/pages/Home/ExchangeModal.js","views/pages/Home/SwapExchange/ShibaSwapSDK.js","views/pages/Home/SwapExchange/UniSwapSDK.js","views/pages/Home/EstimatedProfits.js","views/pages/Home/Exchange.js","../node_modules/@material-ui/icons/PlayArrow.js"],"names":["useStyles","makeStyles","theme","icons","position","left","top","color","palette","primary","main","imagebox","cursor","display","alignItems","background","borderRadius","justifyContent","padding","marginLeft","imagebox1","backgroundColor","selectHover","borderTop","selected","border","fontWeight","heading","dialogbox","overflowY","maxHeight","breakpoints","down","paddingLeft","ExchangeModal","handleClose","detailscard","setTokenSelect","SelectedTokens","tokensToDisabled","classes","useState","tokenText","setTokenText","filterListData","setFilterListData","useEffect","FilterCoinLists","coinName","String","toLowerCase","filtersListss","filter","element","includes","Box","className","IconButton","onClick","DialogTitle","Typography","variant","align","style","DialogContent","DialogContentText","FormControl","fullWidth","TextField","name","size","placeholder","textfield","onChange","e","target","value","InputProps","startAdornment","InputAdornment","fontSize","mt","Grid","container","spacing","item","lg","md","sm","xs","data","src","map","i","image","width","alt","discription","paddingTop","number","ethers","providers","WebSocketProvider","Token","ChainId","MAINNET","root1","scrollbarGutter","boxShadow","root","table","borderLeft","borderRight","clearicons","right","EstimatedProfits","handleClose2","SolutionCard","inputValue","swapFrom","tokenPrice","setTokenPrice","EstimateProfit","a","fromToken","token","ZeroAddress","WETHToken","listData","Promise","all","getWeb3ContractObject","FactoryABI","UniswapFactory","mainnetRPCURL","UniswapFactoryObj","getWeb3Obj","web3","amoutInWei","utils","toWei","toString","methods","getPair","call","getUniSwapPair","RouterABI","UniswapRouter","UniswapRouterContract","getAmountsOut","UniyouGetPrice","returnedUniPrice","Number","noOfProLos","status","PerCentage","price","fromWei","UniSwap","ShibaswapFactory","ShibaswapFactoryObj","getShibaSwapPair","ShibaswapRouter","ShibaswapRouterContract","ShibayouGetPrice","returnedShibaPrice","ShibaSwap","ShushiswapFactory","ShushiswapFactoryObj","getShushiSwapPair","ShushiswapRouter","ShushiswapRouterContract","ShushiyouGetPrice","returnedShushiPrice","ShushiSwap","obj","uniSwap","shibaSwap","shushiSwap","add","console","log","length","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","ml","height","ButtonCircularProgress","EstimatedP","wrapper","text","paddingBottom","letterSpaceing","text1","text2","btn","playicon","mainbox","selectbox","paper","ethbox","textAlign","lineHeight","outline","ethbox1","formControl","paddingRight","ethereum","swapbox","marginTop","childbox","margin","childbox1","childgrid","connetwallet","connetwallet12","childgri88","favouritebtn","default","head","head12","fontFamily","fontStyle","head1","borderBottom","cls","clsProfit","clsLoss","iconBox","EstimatedtextBix","btnColor","Exchange","useWeb3React","account","activate","chainId","library","user","deactivate","useContext","UserContext","history","useHistory","React","open","setOpen","openBuy","setOpenBuy","open2","setOpen2","swapName","setSwapName","swapName2","openWallect","setOpenWallect","fromBalance","setfromBalance","toBalance","settoBalance","buttonName","handleClickOpen","type","setSelectedToken","setSelectTokenType","handleClickOpen2","setAlignment","TokenAddressToUsed","setSwapFrom","swapFromValue","setSwapFromValue","swapToValue","setSwapToValue","swapTo","setSwapTo","fromValue","setFromValue","toValue","setToValue","selectTokenType","inSufficientLiquidity","setInSufficientLiquidity","isTokenApproval","setisTokenApproval","tokenAllowance","settokenAllowance","approveLoader","setApproveLoader","swapLoader","setSwapLoader","returenedValueS","setReturenedValueS","swapTokenNew","ExchangeContractObj","getContract","ExchangeContract","ExchangeABI","SwapRouterF","AmountIn","registration","registrationObj","RegistrationABI","userInfo","isRegistered","registerUser","wait","exchangeTokens","toast","success","error","toastStyl","message","split","approveToken","myContract","ERC20ABI","allowance","approve","from","gasPrice","gasLimit","toHex","checkMaxAllowance","SwapToValuesFunction","axios","method","url","then","res","market_data","current_price","usd","SwapFromValuesFunction","changeTokenName","recivePrice","toFixed","FromTokenBalance","fromTokenContract","balanceOf","fromTokenBalance","decimals","fromDecimal","fromWeiDecimals","Web3","provider","eth","getBalance","balance","balanceImETH","ToTokenBalance","toTokenContract","toTokenBalance","toDecimal","changeTokenValue","fromType","toToken","toType","SwapTypes","SwapFactoryF","pancakeRouterContract","pancakeFactoryContract","WETH","tokens","TokenA","TokenB","youGetPrice","finaldata","ReturnedValuesInProfit","Container","maxWidth","WalletConnectModal","Button","push","pathname","Paper","parseFloat","whiteSpace","min","pt","ACTIVE_NETWORK","disabled","connectWallet","Dialog","onClose","_interopRequireDefault","require","_interopRequireWildcard","Object","defineProperty","exports","_default","createElement","d"],"mappings":"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","file":"static/js/23.004bb938.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n  Grid,\n  Box,\n  Typography,\n  makeStyles,\n  InputAdornment,\n  TextField,\n  IconButton,\n} from \"@material-ui/core\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport { BsSearch } from \"react-icons/bs\";\nimport { BiChevronLeft } from \"react-icons/bi\";\n\nconst useStyles = makeStyles((theme) => ({\n  icons: {\n    position: \"absolute\",\n    left: \"0px\",\n    top: \"12px\",\n    color: theme.palette.primary.main,\n  },\n  imagebox: {\n    cursor: \"pointer\",\n    display: \"flex\",\n    alignItems: \"center\",\n    background:\n      \"linear-gradient(to right, rgba(86, 129, 241, 1) 0%, rgba(19, 84, 252, 1) 100%)\",\n    borderRadius: \"8px\",\n    justifyContent: \"center\",\n    padding: \"10px\",\n    \"& p\": {\n      marginLeft: \"8px\",\n      color: theme.palette.primary.main,\n    },\n  },\n  imagebox1: {\n    // cursor: \"pointer\",\n    display: \"flex\",\n    alignItems: \"center\",\n    // backgroundColor: theme.palette.background.disabled,\n    backgroundColor: \"#0000003d\",\n    borderRadius: \"8px\",\n    justifyContent: \"center\",\n    padding: \"10px\",\n    \"& p\": {\n      marginLeft: \"8px\",\n      // color: theme.palette.primary.main,\n      color: \"#14133b\",\n    },\n  },\n  selectHover: {\n    borderTop: \"1px solid #CACACA\",\n    cursor: \"pointer\",\n  },\n  selected: {\n    border: \"1px solid #fff\",\n    \"& p\": { color: \"#14133b\", fontWeight: \"400\" },\n    // cursor: \"pointer\",\n  },\n  heading: {\n    marginLeft: \"25px\",\n    \"& p\": { color: \"#14133b\", fontWeight: \"400\" },\n  },\n  dialogbox: {\n    overflowY: \"auto\",\n    position: \"relative\",\n    padding: \"20px\",\n    maxHeight: \"95%\",\n\n    //     .visible-scrollbar,\n    // .invisible-scrollbar, .mostly-customized-scrollbar\n    // \"& .visible-scrollbar\": {\n    //   display: \"block\",\n    //   width: \"10em\",\n    //   overflow: \"auto\",\n    //   height: \"2em\",\n    // },\n\n    [theme.breakpoints.down(\"sm\")]: {\n      overflowY: \"auto\",\n    },\n    \"& .MuiOutlinedInput-adornedStart\": {\n      // paddingLeft\"0px\",\n      paddingLeft: \"0px\",\n    },\n  },\n}));\n\nconst ExchangeModal = ({\n  handleClose,\n  detailscard,\n  setTokenSelect,\n  SelectedTokens,\n  tokensToDisabled,\n}) => {\n  const classes = useStyles();\n  const [tokenText, setTokenText] = useState(\"\");\n  const [filterListData, setFilterListData] = useState(detailscard);\n\n  useEffect(() => {\n    if (tokenText != \"\") {\n      FilterCoinLists();\n    } else setFilterListData(detailscard);\n  }, [tokenText]);\n\n  const filterCoin = (e) => {\n    let coinName = String(e.target.value).toLowerCase();\n    this.filteredCoinList = this.coinList.filter((element) => {\n      let cName = String(element.coinShortName).toLowerCase();\n      return cName.includes(coinName);\n    });\n  };\n  const FilterCoinLists = () => {\n    let coinName = String(tokenText).toLowerCase();\n    const filtersListss = detailscard.filter((element) => {\n      let cName = String(element.heading).toLowerCase();\n      return cName.includes(coinName);\n    });\n    // const filtersToken =  filtersListss.filter((element)=>{\n    //   element.heading != tokensToDisabled?.heading\n    // })\n    setFilterListData(filtersListss);\n    // console.log(\"filtersListss ----->>>> \", filtersListss);\n  };\n  // console.log(\n  //   \"===============>>>>>>>>>>>>>>>tokensToDisabled<<<<<<<<<<<<<<<===============\",\n  //   tokensToDisabled\n  // );\n  return (\n    <Box className={`${classes.dialogbox} mostly-customized-scrollbar`}>\n      <IconButton className={classes.icons} onClick={handleClose}>\n        <BiChevronLeft />\n      </IconButton>\n      <DialogTitle>\n        <Typography variant=\"h6\" align=\"center\" style={{ color: \"#14133b\" }}>\n          Select a token\n        </Typography>\n      </DialogTitle>\n      <DialogContent>\n        <DialogContentText>\n          <Box>\n            <FormControl fullWidth>\n              <TextField\n                variant=\"outlined\"\n                name=\"firstName\"\n                size=\"small\"\n                fullWidth=\"true\"\n                placeholder=\"Search by name\"\n                className={classes.textfield}\n                onChange={(e) => setTokenText(e.target.value)}\n                value={tokenText}\n                InputProps={{\n                  startAdornment: (\n                    <InputAdornment position=\"start\">\n                      <IconButton style={{ fontSize: \"17px\" }}>\n                        <BsSearch />\n                      </IconButton>\n                    </InputAdornment>\n                  ),\n                }}\n              />\n            </FormControl>\n          </Box>\n          <Box mt={2}>\n            <Grid container spacing={1}>\n              <Grid item lg={3} md={3} sm={3} xs={6}>\n                <Box\n                  // className={classes.imagebox}\n                  className={\n                    tokensToDisabled?.heading != \"ETH\"\n                      ? classes.imagebox\n                      : classes.imagebox1\n                  }\n                  onClick={() => {\n                    if (tokensToDisabled?.heading != \"ETH\") {\n                      handleClose();\n                      setTokenSelect(\n                        filterListData.filter(\n                          (data) => data.heading == \"ETH\"\n                        )[0]\n                      );\n                    }\n                  }}\n                >\n                  <img src=\"./images/image1.png\" />\n                  <Typography variant=\"body1\">ETH</Typography>\n                </Box>\n              </Grid>\n              <Grid item lg={3} md={3} sm={3} xs={6}>\n                <Box\n                  style={{\n                    background:\n                      \"linear-gradient(to right, rgba(0, 175, 250, 1) 0%, rgba(75, 255, 212, 1) 100%)\",\n                  }}\n                  className={\n                    tokensToDisabled?.heading != \"USDT\"\n                      ? classes.imagebox\n                      : classes.imagebox1\n                  }\n                  onClick={() => {\n                    if (tokensToDisabled?.heading != \"USDT\") {\n                      handleClose();\n                      setTokenSelect(\n                        filterListData.filter(\n                          (data) => data.heading == \"USDT\"\n                        )[0]\n                      );\n                    }\n                  }}\n                >\n                  <img src=\"./images/image1.png\" />\n                  <Typography variant=\"body1\">USDT</Typography>\n                </Box>\n              </Grid>\n              <Grid item lg={3} md={3} sm={3} xs={6}>\n                <Box\n                  style={{\n                    background:\n                      \"linear-gradient(to right, rgba(192, 101, 222, 1) 0%, rgba(96, 42, 252, 1) 100%)\",\n                  }}\n                  className={\n                    tokensToDisabled?.heading != \"USDC\"\n                      ? classes.imagebox\n                      : classes.imagebox1\n                  }\n                  onClick={() => {\n                    if (tokensToDisabled?.heading != \"USDC\") {\n                      handleClose();\n                      setTokenSelect(\n                        filterListData.filter(\n                          (data) => data.heading == \"USDC\"\n                        )[0]\n                      );\n                    }\n                  }}\n                >\n                  <img src=\"./images/image1.png\" />\n                  <Typography variant=\"body1\">USDC</Typography>\n                </Box>\n              </Grid>\n              <Grid item lg={3} md={3} sm={3} xs={6}>\n                <Box\n                  style={{\n                    background: \"rgba(237, 131, 34, 1)\",\n                  }}\n                  className={\n                    tokensToDisabled?.heading != \"DAI\"\n                      ? classes.imagebox\n                      : classes.imagebox1\n                  }\n                  onClick={() => {\n                    if (tokensToDisabled?.heading != \"DAI\") {\n                      handleClose();\n                      setTokenSelect(\n                        filterListData.filter(\n                          (data) => data.heading == \"DAI\"\n                        )[0]\n                      );\n                    }\n                  }}\n                >\n                  <img src=\"./images/image1.png\" />\n                  <Typography variant=\"body1\">DAI</Typography>\n                </Box>\n              </Grid>\n            </Grid>\n          </Box>\n          <Box mt={2}>\n            <Grid container spacing={1} className=\"buytokebBorderbottom\">\n              {filterListData &&\n                filterListData.map((data, i) => {\n                  if (tokensToDisabled?.heading == data?.heading) {\n                    return;\n                  }\n                  return (\n                    <Grid\n                      item\n                      lg={12}\n                      md={12}\n                      sm={12}\n                      xs={12}\n                      // style={{ border: \"1px solid #fff\" }}\n                      // className={classes.selectHover}\n                      className={\n                        SelectedTokens?.heading == data?.heading\n                          ? classes.selected\n                          : tokensToDisabled?.heading == \"ETH\" &&\n                            data.heading == \"WETH\"\n                          ? classes.selected\n                          : classes.selectHover\n                      }\n                      onClick={() => {\n                        if (\n                          SelectedTokens?.heading != data.heading\n                          // ||\n                          // (tokensToDisabled?.heading == \"ETH\" &&\n                          //   data.heading == \"WETH\")\n                        ) {\n                          if (\n                            tokensToDisabled?.heading == \"ETH\" &&\n                            data.heading == \"WETH\"\n                          ) {\n                          } else {\n                            handleClose();\n                            setTokenSelect(data);\n                          }\n                        }\n                      }}\n                    >\n                      <Grid container>\n                        <Grid item lg={6} md={6} sm={6} xs={6}>\n                          <Box display=\"flex\" alignItems=\"center\">\n                            <img\n                              src={data.image}\n                              style={{ width: \"20px\" }}\n                              alt=\"token\"\n                            />\n\n                            <Box className={classes.heading}>\n                              <Typography variant=\"body2\">\n                                {\" \"}\n                                {data.heading}\n                              </Typography>\n                              <Typography\n                                variant=\"body1\"\n                                style={{ color: \"#cacaca\", fontSize: \"13px\" }}\n                              >\n                                {data.discription}\n                              </Typography>\n                            </Box>\n                          </Box>\n                        </Grid>\n                        <Grid item lg={6} md={6} sm={6} xs={6} align=\"right\">\n                          <Typography\n                            variant=\"body1\"\n                            style={{ paddingTop: \"10px\" }}\n                          >\n                            {data.number}\n                          </Typography>\n                        </Grid>\n                      </Grid>\n                    </Grid>\n                  );\n                })}\n            </Grid>\n          </Box>\n        </DialogContentText>\n      </DialogContent>\n    </Box>\n  );\n};\n\nexport default ExchangeModal;\n","import {\n  ChainId,\n  Token,\n  Fetcher,\n  Route,\n  Trade,\n  TradeType,\n  TokenAmount,\n} from \"@shibaswap/sdk\";\nimport { ethers } from \"ethers\";\n\nconst provider = new ethers.providers.WebSocketProvider(\n  \"wss://mainnet.infura.io/ws/v3/2f2312e7890d42f5b0ba6e29ef50674d\"\n);\n\nconst DAI = new Token(\n  ChainId.MAINNET,\n  \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\n  18,\n  \"DAI\"\n);\nconst WETH = new Token(\n  ChainId.MAINNET,\n  \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\n  18,\n  \"WETH\"\n);\nconst USDC = new Token(\n  ChainId.MAINNET,\n  \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\",\n  6,\n  \"USDC\"\n);\n\nlet currency = [\"DAI\", \"WETH\", \"USDC\"];\nfunction getCombination(arr) {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr.length; j++) {\n      for (let k = 0; k < arr.length; k++) {\n        if (arr[i] != arr[j] && arr[j] != arr[k] && arr[i] != arr[k]) {\n          newArr.push([arr[i], arr[j], arr[k], arr[i]]);\n        }\n      }\n    }\n  }\n  return newArr;\n}\n\nexport const ShibaSwapFun = async (\n  //   tokenId,\n  //   NFTTOKEN,\n  //   abi,\n  //   library,\n  //   account,\n  //   contractAddress,\n  amounts\n) => {\n  try {\n    const DAIWETHPair = await Fetcher.fetchPairData(DAI, WETH, provider);\n    const USDCWETHPair = await Fetcher.fetchPairData(USDC, WETH, provider);\n    const DAIUSDCPair = await Fetcher.fetchPairData(DAI, USDC, provider);\n\n    const route = new Route([DAIWETHPair], DAI);\n    const route1 = new Route([USDCWETHPair], WETH);\n    const route2 = new Route([DAIUSDCPair], USDC);\n\n    const route3 = new Route([DAIWETHPair], WETH);\n    const route4 = new Route([USDCWETHPair], USDC);\n    const route5 = new Route([DAIUSDCPair], DAI);\n    let _result = await getCombination(currency);\n    let finalResult = [],\n      obj;\n\n    for (let i = 0; i < _result.length; i++) {\n      for (let j = 0; j < _result[i].length; j++) {\n        if (\n          _result[i][0] === \"DAI\" &&\n          _result[i][1] === \"WETH\" &&\n          _result[i][2] === \"USDC\"\n        ) {\n          console.log(\"DAI -> WETH -> USDC -> DAI\");\n          const amount = amounts - (amounts * 0.3) / 100;\n          const tradeDaiToWeth = new Trade(\n            route,\n            new TokenAmount(\n              DAI,\n              ethers.utils.parseUnits(amount.toFixed(6), 18)\n            ),\n            TradeType.EXACT_INPUT\n          );\n          const _DaiToWeth = tradeDaiToWeth.outputAmount.raw;\n          let DaiToWeth = ethers.utils.formatUnits(\n            _DaiToWeth.toString(),\n            \"ether\"\n          );\n          console.log(`${amounts} DAI to ${DaiToWeth} WETH`);\n\n          DaiToWeth = Number(DaiToWeth) - (Number(DaiToWeth) * 0.3) / 100;\n          const tradeWethToUsdc = new Trade(\n            route1,\n            new TokenAmount(\n              WETH,\n              ethers.utils.parseUnits(DaiToWeth.toFixed(6))\n            ),\n            TradeType.EXACT_INPUT\n          );\n          const WethToUsdc_ = tradeWethToUsdc.outputAmount.raw;\n          let WethToUsdc = ethers.utils.formatUnits(WethToUsdc_.toString(), 6);\n          console.log(`${DaiToWeth} WETH to ${WethToUsdc} USDC`);\n\n          WethToUsdc = Number(WethToUsdc) - (Number(WethToUsdc) * 0.3) / 100;\n          const tradeUsdcToDai = new Trade(\n            route2,\n            new TokenAmount(\n              USDC,\n              ethers.utils.parseUnits(WethToUsdc.toFixed(6), 6)\n            ),\n            TradeType.EXACT_INPUT\n          );\n          const UsdcToDai_ = tradeUsdcToDai.outputAmount.raw;\n          const UsdcToDai = ethers.utils.formatUnits(UsdcToDai_.toString(), 18);\n          console.log(`${WethToUsdc} USDC to ${UsdcToDai} DAI`);\n          const PL = ((Number(UsdcToDai) - amounts) * 100) / amounts;\n          obj = {\n            forRequest: \"DAI -> WETH -> USDC -> DAI\",\n            resp1: ` ${amounts} DAI to ${DaiToWeth} WETH`,\n            resp2: `${DaiToWeth} WETH to ${WethToUsdc} USDC`,\n            resp3: `${WethToUsdc} USDC to ${UsdcToDai} DAI`,\n          };\n          if (PL > 0) {\n            console.log(`Profit : ${PL.toFixed(2)}%\\n`);\n            obj[\"resp4\"] = `Profit : ${PL.toFixed(2)}%\\n`;\n          } else {\n            console.log(`Loss : ${PL.toFixed(2)}%\\n`);\n            obj[\"resp4\"] = `Loss : ${PL.toFixed(2)}%\\n`;\n          }\n          finalResult.push(obj);\n\n          break;\n        }\n        if (\n          _result[i][0] === \"DAI\" &&\n          _result[i][1] === \"USDC\" &&\n          _result[i][2] === \"WETH\"\n        ) {\n          console.log(\"DAI -> USDC -> WETH -> DAI\");\n          const amount = amounts - (amounts * 0.3) / 100;\n          const tradeDaiToUsdc = new Trade(\n            route5,\n            new TokenAmount(DAI, ethers.utils.parseUnits(amount.toFixed(6))),\n            TradeType.EXACT_INPUT\n          );\n          const DaiToUsdc_ = tradeDaiToUsdc.outputAmount.raw;\n          let DaiToUsdc = ethers.utils.formatUnits(DaiToUsdc_.toString(), 6);\n          console.log(`${amounts} DAI to ${DaiToUsdc} USDC`);\n\n          DaiToUsdc = Number(DaiToUsdc) - (Number(DaiToUsdc) * 0.3) / 100;\n          const tradeUsdcToWeth = new Trade(\n            route4,\n            new TokenAmount(\n              USDC,\n              ethers.utils.parseUnits(DaiToUsdc.toFixed(6), 6)\n            ),\n            TradeType.EXACT_INPUT\n          );\n          const UsdcToWeth_ = tradeUsdcToWeth.outputAmount.raw;\n          let UsdcToWeth = ethers.utils.formatUnits(UsdcToWeth_.toString(), 18);\n          console.log(`${DaiToUsdc} USDC to ${UsdcToWeth} WETH`);\n\n          UsdcToWeth = Number(UsdcToWeth) - (Number(UsdcToWeth) * 0.3) / 100;\n          const tradeWethToDAi = new Trade(\n            route3,\n            new TokenAmount(\n              WETH,\n              ethers.utils.parseUnits(UsdcToWeth.toFixed(6))\n            ),\n            TradeType.EXACT_INPUT\n          );\n          const WethToDai_ = tradeWethToDAi.outputAmount.raw;\n          const WethToDai = ethers.utils.formatUnits(WethToDai_.toString(), 18);\n          console.log(`${UsdcToWeth} WETH to ${WethToDai} DAI`);\n          const PL = ((Number(WethToDai) - amounts) * 100) / amounts;\n          obj = {\n            forRequest: \"DAI -> USDC -> WETH -> DAI\",\n            resp1: ` ${amounts} DAI to ${DaiToUsdc} USDC`,\n            resp2: `${DaiToUsdc} USDC to ${UsdcToWeth} WETH`,\n            resp3: `${UsdcToWeth} WETH to ${WethToDai} DAI`,\n          };\n          if (PL > 0) {\n            obj[\"resp4\"] = `Profit : ${PL.toFixed(2)}%\\n`;\n\n            console.log(`Profit : ${PL.toFixed(2)}%\\n`);\n          } else {\n            obj[\"resp4\"] = `Loss : ${PL.toFixed(2)}%\\n`;\n\n            console.log(`Loss : ${PL.toFixed(2)}%\\n`);\n          }\n          finalResult.push(obj);\n\n          break;\n        }\n\n        if (\n          _result[i][0] === \"WETH\" &&\n          _result[i][1] === \"USDC\" &&\n          _result[i][2] === \"DAI\"\n        ) {\n          console.log(\"WETH -> USDC -> DAI -> WETH\");\n          const amount = amounts - (amounts * 0.3) / 100;\n          const tradeWethToUsdc = new Trade(\n            route1,\n            new TokenAmount(WETH, ethers.utils.parseUnits(amount.toFixed(6))),\n            TradeType.EXACT_INPUT\n          );\n          const WethToUsdc_ = tradeWethToUsdc.outputAmount.raw;\n          let WethToUsdc = ethers.utils.formatUnits(WethToUsdc_.toString(), 6);\n          console.log(`${amounts} WETH to ${WethToUsdc} USDC`);\n\n          WethToUsdc = Number(WethToUsdc) - (Number(WethToUsdc) * 0.3) / 100;\n          const tradeUsdcToDAi = new Trade(\n            route2,\n            new TokenAmount(\n              USDC,\n              ethers.utils.parseUnits(WethToUsdc.toFixed(6), 6)\n            ),\n            TradeType.EXACT_INPUT\n          );\n          const UsdcToDai_ = tradeUsdcToDAi.outputAmount.raw;\n          let UsdcToDai = ethers.utils.formatUnits(UsdcToDai_.toString(), 18);\n          console.log(`${WethToUsdc} USDC to ${UsdcToDai} DAI`);\n          UsdcToDai = Number(UsdcToDai) - (Number(UsdcToDai) * 0.3) / 100;\n          const tradeDaiToWEth = new Trade(\n            route,\n            new TokenAmount(DAI, ethers.utils.parseUnits(UsdcToDai.toString())),\n            TradeType.EXACT_INPUT\n          );\n          const DaiToWeth_ = tradeDaiToWEth.outputAmount.raw;\n          const DaiToWeth = ethers.utils.formatUnits(DaiToWeth_.toString(), 18);\n          console.log(`${UsdcToDai} DAI to ${DaiToWeth} WETH`);\n          const PL = ((Number(DaiToWeth) - amounts) * 100) / amounts;\n          obj = {\n            forRequest: \"WETH -> USDC -> DAI -> WETH\",\n            resp1: `${amounts} WETH to ${WethToUsdc} USDC`,\n            resp2: `${WethToUsdc} USDC to ${UsdcToDai} DAI`,\n            resp3: `${UsdcToDai} DAI to ${DaiToWeth} WETH`,\n          };\n          if (PL > 0) {\n            console.log(`Profit : ${PL.toFixed(2)}%\\n`);\n            obj[\"resp4\"] = `Profit : ${PL.toFixed(2)}%\\n`;\n          } else {\n            console.log(`Loss : ${PL.toFixed(2)}%\\n`);\n            obj[\"resp4\"] = `Loss : ${PL.toFixed(2)}%\\n`;\n          }\n          finalResult.push(obj);\n\n          break;\n        }\n\n        if (\n          _result[i][0] === \"WETH\" &&\n          _result[i][1] === \"DAI\" &&\n          _result[i][2] === \"USDC\"\n        ) {\n          console.log(\"WETH -> DAI -> USDC -> WETH\");\n          const amount = amounts - (amounts * 0.3) / 100;\n          const tradeWethToDai = new Trade(\n            route3,\n            new TokenAmount(WETH, ethers.utils.parseUnits(amount.toFixed())),\n            TradeType.EXACT_INPUT\n          );\n          const WethToDai_ = tradeWethToDai.outputAmount.raw;\n          let WethToDai = ethers.utils.formatUnits(WethToDai_.toString(), 18);\n          console.log(`${amounts} WETH to ${WethToDai} DAI`);\n          WethToDai = Number(WethToDai) - (Number(WethToDai) * 0.3) / 100;\n          const tradeDaiToUsdc = new Trade(\n            route5,\n            new TokenAmount(DAI, ethers.utils.parseUnits(WethToDai.toFixed(6))),\n            TradeType.EXACT_INPUT\n          );\n          const DaiToUsdc_ = tradeDaiToUsdc.outputAmount.raw;\n          let DaiToUsdc = ethers.utils.formatUnits(DaiToUsdc_.toString(), 6);\n          console.log(`${WethToDai} DAI to ${DaiToUsdc} USDC`);\n          DaiToUsdc = Number(DaiToUsdc) - (Number(DaiToUsdc) * 0.3) / 100;\n          const tradeUsdcToWeth = new Trade(\n            route4,\n            new TokenAmount(\n              USDC,\n              ethers.utils.parseUnits(DaiToUsdc.toFixed(6), 6)\n            ),\n            TradeType.EXACT_INPUT\n          );\n          const UsdcToWeth_ = tradeUsdcToWeth.outputAmount.raw;\n          const UsdcToWeth = ethers.utils.formatUnits(\n            UsdcToWeth_.toString(),\n            18\n          );\n          console.log(`${DaiToUsdc} USDC to ${UsdcToWeth} WETH`);\n          const PL = ((Number(UsdcToWeth) - amounts) * 100) / amounts;\n          obj = {\n            forRequest: \"WETH -> DAI -> USDC -> WETH\",\n            resp1: `${amounts} WETH to ${WethToDai} DAI`,\n            resp2: `${WethToDai} DAI to ${DaiToUsdc} USDC`,\n            resp3: `${DaiToUsdc} USDC to ${UsdcToWeth} WETH`,\n          };\n          if (PL > 0) {\n            obj[\"resp4\"] = `Profit : ${PL.toFixed(2)}%\\n`;\n\n            console.log(`Profit : ${PL.toFixed(2)}%\\n`);\n          } else {\n            obj[\"resp4\"] = `Loss : ${PL.toFixed(2)}%\\n`;\n\n            console.log(`Loss : ${PL.toFixed(2)}%\\n`);\n          }\n          finalResult.push(obj);\n\n          break;\n        }\n\n        if (\n          _result[i][0] === \"USDC\" &&\n          _result[i][1] === \"DAI\" &&\n          _result[i][2] === \"WETH\"\n        ) {\n          console.log(\"USDC -> DAI -> WETH -> USDC\");\n          const amount = amounts - (amounts * 0.3) / 100;\n          const tradeUsdcToDai = new Trade(\n            route2,\n            new TokenAmount(\n              USDC,\n              ethers.utils.parseUnits(amount.toFixed(6), 6)\n            ),\n            TradeType.EXACT_INPUT\n          );\n          const UsdcToDai_ = tradeUsdcToDai.outputAmount.raw;\n          let UsdcToDai = ethers.utils.formatUnits(UsdcToDai_.toString(), 18);\n          console.log(`${amounts} USDC to ${UsdcToDai} DAI`);\n          UsdcToDai = Number(UsdcToDai) - (Number(UsdcToDai) * 0.3) / 100;\n          const tradeDaiToWEth = new Trade(\n            route,\n            new TokenAmount(\n              DAI,\n              ethers.utils.parseUnits(UsdcToDai.toFixed(6), 18)\n            ),\n            TradeType.EXACT_INPUT\n          );\n          const DaiToWeth_ = tradeDaiToWEth.outputAmount.raw;\n          let DaiToWeth = ethers.utils.formatUnits(DaiToWeth_.toString(), 18);\n          console.log(`${UsdcToDai} DAI to ${DaiToWeth} WETH`);\n          DaiToWeth = Number(DaiToWeth) - (Number(DaiToWeth) * 0.3) / 100;\n          const tradeWethToUsdc = new Trade(\n            route1,\n            new TokenAmount(\n              WETH,\n              ethers.utils.parseUnits(DaiToWeth.toFixed(6), 18)\n            ),\n            TradeType.EXACT_INPUT\n          );\n          const WethToUsdc_ = tradeWethToUsdc.outputAmount.raw;\n          const WethToUsdc = ethers.utils.formatUnits(\n            WethToUsdc_.toString(),\n            6\n          );\n          console.log(`${DaiToWeth} WETH to ${WethToUsdc} USDC`);\n          const PL = ((Number(WethToUsdc) - amounts) * 100) / amounts;\n          obj = {\n            forRequest: \"USDC -> DAI -> WETH -> USDC\",\n            resp1: `${amounts} USDC to ${UsdcToDai} DAI`,\n            resp2: `${UsdcToDai} DAI to ${DaiToWeth} WETH`,\n            resp3: `${DaiToWeth} WETH to ${WethToUsdc} USDC`,\n          };\n          if (PL > 0) {\n            obj[\"resp4\"] = `Profit : ${PL.toFixed(2)}%\\n`;\n\n            console.log(`Profit : ${PL.toFixed(2)}%\\n`);\n          } else {\n            obj[\"resp4\"] = `Loss : ${PL.toFixed(2)}%\\n`;\n\n            console.log(`Loss : ${PL.toFixed(2)}%\\n`);\n          }\n          finalResult.push(obj);\n\n          break;\n        }\n\n        if (\n          _result[i][0] === \"USDC\" &&\n          _result[i][1] === \"WETH\" &&\n          _result[i][2] === \"DAI\"\n        ) {\n          console.log(\"USDC -> WETH -> DAI -> USDC\");\n          const amount = amounts - (amounts * 0.3) / 100;\n          const tradeUsdcToWEth = new Trade(\n            route4,\n            new TokenAmount(\n              USDC,\n              ethers.utils.parseUnits(amount.toFixed(6), 6)\n            ),\n            TradeType.EXACT_INPUT\n          );\n          const UsdcToWeth_ = tradeUsdcToWEth.outputAmount.raw;\n          let UsdcToWeth = ethers.utils.formatUnits(UsdcToWeth_.toString(), 18);\n          console.log(`${amounts} USDC to ${UsdcToWeth} WETH`);\n\n          UsdcToWeth = Number(UsdcToWeth) - (Number(UsdcToWeth) * 0.3) / 100;\n          const tradeWethToDai = new Trade(\n            route3,\n            new TokenAmount(\n              WETH,\n              ethers.utils.parseUnits(UsdcToWeth.toFixed(6), 18)\n            ),\n            TradeType.EXACT_INPUT\n          );\n          const WethToDai_ = tradeWethToDai.outputAmount.raw;\n          let WethToDai = ethers.utils.formatUnits(WethToDai_.toString(), 18);\n          console.log(`${UsdcToWeth} WETH to ${WethToDai} DAI`);\n          WethToDai = Number(WethToDai) - (Number(WethToDai) * 0.3) / 100;\n          const tardeDAiToUsdc = new Trade(\n            route5,\n            new TokenAmount(\n              DAI,\n              ethers.utils.parseUnits(WethToDai.toFixed(6), 18)\n            ),\n            TradeType.EXACT_INPUT\n          );\n          const DaiToUsdc_ = tardeDAiToUsdc.outputAmount.raw;\n          const DaiToUsdc = ethers.utils.formatUnits(DaiToUsdc_.toString(), 6);\n          console.log(`${WethToDai} DAI to ${DaiToUsdc} USDC`);\n          const PL = ((Number(DaiToUsdc) - amounts) * 100) / amounts;\n          obj = {\n            forRequest: \"USDC -> WETH -> DAI -> USDC\",\n            resp1: `${amounts} USDC to ${UsdcToWeth} WETH`,\n            resp2: `${UsdcToWeth} WETH to ${WethToDai} DAI`,\n            resp3: `${WethToDai} DAI to ${DaiToUsdc} USDC`,\n          };\n          if (PL > 0) {\n            obj[\"resp4\"] = `Profit : ${PL.toFixed(2)}%\\n`;\n\n            console.log(`Profit : ${PL.toFixed(2)}%\\n`);\n          } else {\n            obj[\"resp4\"] = `Loss : ${PL.toFixed(2)}%\\n`;\n\n            console.log(`Loss : ${PL.toFixed(2)}%\\n`);\n          }\n          finalResult.push(obj);\n          console.log(\"123----finalResult----\", finalResult);\n          break;\n        }\n      }\n      // if (i === _result.length - 1) {\n      //     console.log(\"finalResult==>>\", finalResult);\n      //     responses = ({ responseCode: 200, responseMessage: \"Data fetched successfully!\", responseResult: finalResult })\n      //     resolve(responses)\n      // }\n    }\n  } catch (error) {\n    console.log(\"error\", error);\n    return false;\n  }\n};\n","import {\n  ChainId,\n  Token,\n  Fetcher,\n  Route,\n  Trade,\n  TradeType,\n  TokenAmount,\n} from \"@uniswap/sdk\";\nimport { ethers } from \"ethers\";\n\nconst provider = new ethers.providers.WebSocketProvider(\n  \"wss://mainnet.infura.io/ws/v3/2f2312e7890d42f5b0ba6e29ef50674d\"\n);\n\nconst DAI = new Token(\n  ChainId.MAINNET,\n  \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\n  18,\n  \"DAI\"\n);\nconst WETH = new Token(\n  ChainId.MAINNET,\n  \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\n  18,\n  \"WETH\"\n);\nconst USDC = new Token(\n  ChainId.MAINNET,\n  \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\",\n  6,\n  \"USDC\"\n);\n\n// note that you may want/need to handle this async code differently,\n// for example if top-level await is not an option\n\n// Test\nlet currency = [\"DAI\", \"WETH\", \"USDC\"];\nfunction getCombination(arr) {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr.length; j++) {\n      for (let k = 0; k < arr.length; k++) {\n        if (arr[i] != arr[j] && arr[j] != arr[k] && arr[i] != arr[k]) {\n          newArr.push([arr[i], arr[j], arr[k], arr[i]]);\n        }\n      }\n    }\n  }\n  return newArr;\n}\nexport const UniSwapFun = async (\n  //   tokenId,\n  //   NFTTOKEN,\n  //   abi,\n  //   library,\n  //   account,\n  //   contractAddress,\n  amounts\n) => {\n  try {\n    const DAIWETHPair = await Fetcher.fetchPairData(DAI, WETH, provider);\n    const USDCWETHPair = await Fetcher.fetchPairData(USDC, WETH, provider);\n    const DAIUSDCPair = await Fetcher.fetchPairData(DAI, USDC, provider);\n\n    const route = new Route([DAIWETHPair], DAI);\n    const route1 = new Route([USDCWETHPair], WETH);\n    const route2 = new Route([DAIUSDCPair], USDC);\n\n    const route3 = new Route([DAIWETHPair], WETH);\n    const route4 = new Route([USDCWETHPair], USDC);\n    const route5 = new Route([DAIUSDCPair], DAI);\n    let _result = await getCombination(currency);\n    let finalResult = [],\n      obj;\n\n    for (let i = 0; i < _result.length; i++) {\n      for (let j = 0; j < _result[i].length; j++) {\n        if (\n          _result[i][0] === \"DAI\" &&\n          _result[i][1] === \"WETH\" &&\n          _result[i][2] === \"USDC\"\n        ) {\n          console.log(\"DAI -> WETH -> USDC -> DAI\");\n          const amount = amounts - (amounts * 0.3) / 100;\n          const tradeDaiToWeth = new Trade(\n            route,\n            new TokenAmount(\n              DAI,\n              ethers.utils.parseUnits(amount.toFixed(6), 18)\n            ),\n            TradeType.EXACT_INPUT\n          );\n          const _DaiToWeth = tradeDaiToWeth.outputAmount.raw;\n          let DaiToWeth = ethers.utils.formatUnits(\n            _DaiToWeth.toString(),\n            \"ether\"\n          );\n          console.log(`${amounts} DAI to ${DaiToWeth} WETH`);\n\n          DaiToWeth = Number(DaiToWeth) - (Number(DaiToWeth) * 0.3) / 100;\n          const tradeWethToUsdc = new Trade(\n            route1,\n            new TokenAmount(\n              WETH,\n              ethers.utils.parseUnits(DaiToWeth.toFixed(6))\n            ),\n            TradeType.EXACT_INPUT\n          );\n          const WethToUsdc_ = tradeWethToUsdc.outputAmount.raw;\n          let WethToUsdc = ethers.utils.formatUnits(WethToUsdc_.toString(), 6);\n          console.log(`${DaiToWeth} WETH to ${WethToUsdc} USDC`);\n\n          WethToUsdc = Number(WethToUsdc) - (Number(WethToUsdc) * 0.3) / 100;\n          const tradeUsdcToDai = new Trade(\n            route2,\n            new TokenAmount(\n              USDC,\n              ethers.utils.parseUnits(WethToUsdc.toFixed(6), 6)\n            ),\n            TradeType.EXACT_INPUT\n          );\n          const UsdcToDai_ = tradeUsdcToDai.outputAmount.raw;\n          const UsdcToDai = ethers.utils.formatUnits(UsdcToDai_.toString(), 18);\n          console.log(`${WethToUsdc} USDC to ${UsdcToDai} DAI`);\n          const PL = ((Number(UsdcToDai) - amounts) * 100) / amounts;\n          obj = {\n            forRequest: \"DAI -> WETH -> USDC -> DAI\",\n            resp1: ` ${amounts} DAI to ${DaiToWeth} WETH`,\n            resp2: `${DaiToWeth} WETH to ${WethToUsdc} USDC`,\n            resp3: `${WethToUsdc} USDC to ${UsdcToDai} DAI`,\n          };\n          if (PL > 0) {\n            console.log(`Profit : ${PL.toFixed(2)}%\\n`);\n            obj[\"resp4\"] = `Profit : ${PL.toFixed(2)}%\\n`;\n          } else {\n            console.log(`Loss : ${PL.toFixed(2)}%\\n`);\n            obj[\"resp4\"] = `Loss : ${PL.toFixed(2)}%\\n`;\n          }\n          finalResult.push(obj);\n\n          break;\n        }\n        if (\n          _result[i][0] === \"DAI\" &&\n          _result[i][1] === \"USDC\" &&\n          _result[i][2] === \"WETH\"\n        ) {\n          console.log(\"DAI -> USDC -> WETH -> DAI\");\n          const amount = amounts - (amounts * 0.3) / 100;\n          const tradeDaiToUsdc = new Trade(\n            route5,\n            new TokenAmount(DAI, ethers.utils.parseUnits(amount.toFixed(6))),\n            TradeType.EXACT_INPUT\n          );\n          const DaiToUsdc_ = tradeDaiToUsdc.outputAmount.raw;\n          let DaiToUsdc = ethers.utils.formatUnits(DaiToUsdc_.toString(), 6);\n          console.log(`${amounts} DAI to ${DaiToUsdc} USDC`);\n\n          DaiToUsdc = Number(DaiToUsdc) - (Number(DaiToUsdc) * 0.3) / 100;\n          const tradeUsdcToWeth = new Trade(\n            route4,\n            new TokenAmount(\n              USDC,\n              ethers.utils.parseUnits(DaiToUsdc.toFixed(6), 6)\n            ),\n            TradeType.EXACT_INPUT\n          );\n          const UsdcToWeth_ = tradeUsdcToWeth.outputAmount.raw;\n          let UsdcToWeth = ethers.utils.formatUnits(UsdcToWeth_.toString(), 18);\n          console.log(`${DaiToUsdc} USDC to ${UsdcToWeth} WETH`);\n\n          UsdcToWeth = Number(UsdcToWeth) - (Number(UsdcToWeth) * 0.3) / 100;\n          const tradeWethToDAi = new Trade(\n            route3,\n            new TokenAmount(\n              WETH,\n              ethers.utils.parseUnits(UsdcToWeth.toFixed(6))\n            ),\n            TradeType.EXACT_INPUT\n          );\n          const WethToDai_ = tradeWethToDAi.outputAmount.raw;\n          const WethToDai = ethers.utils.formatUnits(WethToDai_.toString(), 18);\n          console.log(`${UsdcToWeth} WETH to ${WethToDai} DAI`);\n          const PL = ((Number(WethToDai) - amounts) * 100) / amounts;\n          obj = {\n            forRequest: \"DAI -> USDC -> WETH -> DAI\",\n            resp1: ` ${amounts} DAI to ${DaiToUsdc} USDC`,\n            resp2: `${DaiToUsdc} USDC to ${UsdcToWeth} WETH`,\n            resp3: `${UsdcToWeth} WETH to ${WethToDai} DAI`,\n          };\n          if (PL > 0) {\n            obj[\"resp4\"] = `Profit : ${PL.toFixed(2)}%\\n`;\n\n            console.log(`Profit : ${PL.toFixed(2)}%\\n`);\n          } else {\n            obj[\"resp4\"] = `Loss : ${PL.toFixed(2)}%\\n`;\n\n            console.log(`Loss : ${PL.toFixed(2)}%\\n`);\n          }\n          finalResult.push(obj);\n\n          break;\n        }\n\n        if (\n          _result[i][0] === \"WETH\" &&\n          _result[i][1] === \"USDC\" &&\n          _result[i][2] === \"DAI\"\n        ) {\n          console.log(\"WETH -> USDC -> DAI -> WETH\");\n          const amount = amounts - (amounts * 0.3) / 100;\n          const tradeWethToUsdc = new Trade(\n            route1,\n            new TokenAmount(WETH, ethers.utils.parseUnits(amount.toFixed(6))),\n            TradeType.EXACT_INPUT\n          );\n          const WethToUsdc_ = tradeWethToUsdc.outputAmount.raw;\n          let WethToUsdc = ethers.utils.formatUnits(WethToUsdc_.toString(), 6);\n          console.log(`${amounts} WETH to ${WethToUsdc} USDC`);\n\n          WethToUsdc = Number(WethToUsdc) - (Number(WethToUsdc) * 0.3) / 100;\n          const tradeUsdcToDAi = new Trade(\n            route2,\n            new TokenAmount(\n              USDC,\n              ethers.utils.parseUnits(WethToUsdc.toFixed(6), 6)\n            ),\n            TradeType.EXACT_INPUT\n          );\n          const UsdcToDai_ = tradeUsdcToDAi.outputAmount.raw;\n          let UsdcToDai = ethers.utils.formatUnits(UsdcToDai_.toString(), 18);\n          console.log(`${WethToUsdc} USDC to ${UsdcToDai} DAI`);\n\n          UsdcToDai = Number(UsdcToDai) - (Number(UsdcToDai) * 0.3) / 100;\n          const tradeDaiToWEth = new Trade(\n            route,\n            new TokenAmount(DAI, ethers.utils.parseUnits(UsdcToDai.toFixed(6))),\n            TradeType.EXACT_INPUT\n          );\n          const DaiToWeth_ = tradeDaiToWEth.outputAmount.raw;\n          const DaiToWeth = ethers.utils.formatUnits(DaiToWeth_.toString(), 18);\n          console.log(`${UsdcToDai} DAI to ${DaiToWeth} WETH`);\n          const PL = ((Number(DaiToWeth) - amounts) * 100) / amounts;\n          obj = {\n            forRequest: \"WETH -> USDC -> DAI -> WETH\",\n            resp1: `${amounts} WETH to ${WethToUsdc} USDC`,\n            resp2: `${WethToUsdc} USDC to ${UsdcToDai} DAI`,\n            resp3: `${UsdcToDai} DAI to ${DaiToWeth} WETH`,\n          };\n          if (PL > 0) {\n            console.log(`Profit : ${PL.toFixed(2)}%\\n`);\n            obj[\"resp4\"] = `Profit : ${PL.toFixed(2)}%\\n`;\n          } else {\n            console.log(`Loss : ${PL.toFixed(2)}%\\n`);\n            obj[\"resp4\"] = `Loss : ${PL.toFixed(2)}%\\n`;\n          }\n          finalResult.push(obj);\n\n          break;\n        }\n\n        if (\n          _result[i][0] === \"WETH\" &&\n          _result[i][1] === \"DAI\" &&\n          _result[i][2] === \"USDC\"\n        ) {\n          console.log(\"WETH -> DAI -> USDC -> WETH\");\n          const amount = amounts - (amounts * 0.3) / 100;\n          const tradeWethToDai = new Trade(\n            route3,\n            new TokenAmount(WETH, ethers.utils.parseUnits(amount.toFixed(6))),\n            TradeType.EXACT_INPUT\n          );\n          const WethToDai_ = tradeWethToDai.outputAmount.raw;\n          let WethToDai = ethers.utils.formatUnits(WethToDai_.toString(), 18);\n          console.log(`${amounts} WETH to ${WethToDai} DAI`);\n\n          WethToDai = Number(WethToDai) - (Number(WethToDai) * 0.3) / 100;\n          const tradeDaiToUsdc = new Trade(\n            route5,\n            new TokenAmount(DAI, ethers.utils.parseUnits(WethToDai.toFixed(6))),\n            TradeType.EXACT_INPUT\n          );\n          const DaiToUsdc_ = tradeDaiToUsdc.outputAmount.raw;\n          let DaiToUsdc = ethers.utils.formatUnits(DaiToUsdc_.toString(), 6);\n          console.log(`${WethToDai} DAI to ${DaiToUsdc} USDC`);\n          DaiToUsdc = Number(DaiToUsdc) - (Number(DaiToUsdc) * 0.3) / 100;\n          const tradeUsdcToWeth = new Trade(\n            route4,\n            new TokenAmount(\n              USDC,\n              ethers.utils.parseUnits(DaiToUsdc.toFixed(6), 6)\n            ),\n            TradeType.EXACT_INPUT\n          );\n          const UsdcToWeth_ = tradeUsdcToWeth.outputAmount.raw;\n          const UsdcToWeth = ethers.utils.formatUnits(\n            UsdcToWeth_.toString(),\n            18\n          );\n          console.log(`${DaiToUsdc} USDC to ${UsdcToWeth} WETH`);\n          const PL = ((Number(UsdcToWeth) - amounts) * 100) / amounts;\n          obj = {\n            forRequest: \"WETH -> DAI -> USDC -> WETH\",\n            resp1: `${amounts} WETH to ${WethToDai} DAI`,\n            resp2: `${WethToDai} DAI to ${DaiToUsdc} USDC`,\n            resp3: `${DaiToUsdc} USDC to ${UsdcToWeth} WETH`,\n          };\n          if (PL > 0) {\n            obj[\"resp4\"] = `Profit : ${PL.toFixed(2)}%\\n`;\n\n            console.log(`Profit : ${PL.toFixed(2)}%\\n`);\n          } else {\n            obj[\"resp4\"] = `Loss : ${PL.toFixed(2)}%\\n`;\n\n            console.log(`Loss : ${PL.toFixed(2)}%\\n`);\n          }\n          finalResult.push(obj);\n\n          break;\n        }\n\n        if (\n          _result[i][0] === \"USDC\" &&\n          _result[i][1] === \"DAI\" &&\n          _result[i][2] === \"WETH\"\n        ) {\n          console.log(\"USDC -> DAI -> WETH -> USDC\");\n          const amount = amounts - (amounts * 0.3) / 100;\n          const tradeUsdcToDai = new Trade(\n            route2,\n            new TokenAmount(\n              USDC,\n              ethers.utils.parseUnits(amount.toFixed(6), 6)\n            ),\n            TradeType.EXACT_INPUT\n          );\n          const UsdcToDai_ = tradeUsdcToDai.outputAmount.raw;\n          let UsdcToDai = ethers.utils.formatUnits(UsdcToDai_.toString(), 18);\n          console.log(`${amounts} USDC to ${UsdcToDai} DAI`);\n          UsdcToDai = Number(UsdcToDai) - (Number(UsdcToDai) * 0.3) / 100;\n          const tradeDaiToWEth = new Trade(\n            route,\n            new TokenAmount(\n              DAI,\n              ethers.utils.parseUnits(UsdcToDai.toFixed(6), 18)\n            ),\n            TradeType.EXACT_INPUT\n          );\n          const DaiToWeth_ = tradeDaiToWEth.outputAmount.raw;\n          let DaiToWeth = ethers.utils.formatUnits(DaiToWeth_.toString(), 18);\n          console.log(`${UsdcToDai} DAI to ${DaiToWeth} WETH`);\n          DaiToWeth = Number(DaiToWeth) - (Number(DaiToWeth) * 0.3) / 100;\n          const tradeWethToUsdc = new Trade(\n            route1,\n            new TokenAmount(\n              WETH,\n              ethers.utils.parseUnits(DaiToWeth.toFixed(6), 18)\n            ),\n            TradeType.EXACT_INPUT\n          );\n          const WethToUsdc_ = tradeWethToUsdc.outputAmount.raw;\n          const WethToUsdc = ethers.utils.formatUnits(\n            WethToUsdc_.toString(),\n            6\n          );\n          console.log(`${DaiToWeth} WETH to ${WethToUsdc} USDC`);\n          const PL = ((Number(WethToUsdc) - amounts) * 100) / amounts;\n          obj = {\n            forRequest: \"USDC -> DAI -> WETH -> USDC\",\n            resp1: `${amounts} USDC to ${UsdcToDai} DAI`,\n            resp2: `${UsdcToDai} DAI to ${DaiToWeth} WETH`,\n            resp3: `${DaiToWeth} WETH to ${WethToUsdc} USDC`,\n          };\n          if (PL > 0) {\n            obj[\"resp4\"] = `Profit : ${PL.toFixed(2)}%\\n`;\n\n            console.log(`Profit : ${PL.toFixed(2)}%\\n`);\n          } else {\n            obj[\"resp4\"] = `Loss : ${PL.toFixed(2)}%\\n`;\n\n            console.log(`Loss : ${PL.toFixed(2)}%\\n`);\n          }\n          finalResult.push(obj);\n\n          break;\n        }\n\n        if (\n          _result[i][0] === \"USDC\" &&\n          _result[i][1] === \"WETH\" &&\n          _result[i][2] === \"DAI\"\n        ) {\n          console.log(\"USDC -> WETH -> DAI -> USDC\");\n          const amount = amounts - (amounts * 0.3) / 100;\n          const tradeUsdcToWEth = new Trade(\n            route4,\n            new TokenAmount(\n              USDC,\n              ethers.utils.parseUnits(amount.toFixed(6), 6)\n            ),\n            TradeType.EXACT_INPUT\n          );\n          const UsdcToWeth_ = tradeUsdcToWEth.outputAmount.raw;\n          let UsdcToWeth = ethers.utils.formatUnits(UsdcToWeth_.toString(), 18);\n          console.log(`${amounts} USDC to ${UsdcToWeth} WETH`);\n          UsdcToWeth = Number(UsdcToWeth) - (Number(UsdcToWeth) * 0.3) / 100;\n          const tradeWethToDai = new Trade(\n            route3,\n            new TokenAmount(\n              WETH,\n              ethers.utils.parseUnits(UsdcToWeth.toFixed(6), 18)\n            ),\n            TradeType.EXACT_INPUT\n          );\n          const WethToDai_ = tradeWethToDai.outputAmount.raw;\n          let WethToDai = ethers.utils.formatUnits(WethToDai_.toString(), 18);\n          console.log(`${UsdcToWeth} WETH to ${WethToDai} DAI`);\n\n          WethToDai = Number(WethToDai) - (Number(WethToDai) * 0.3) / 100;\n          const tardeDAiToUsdc = new Trade(\n            route5,\n            new TokenAmount(\n              DAI,\n              ethers.utils.parseUnits(WethToDai.toFixed(6), 18)\n            ),\n            TradeType.EXACT_INPUT\n          );\n          const DaiToUsdc_ = tardeDAiToUsdc.outputAmount.raw;\n          const DaiToUsdc = ethers.utils.formatUnits(DaiToUsdc_.toString(), 6);\n          console.log(`${WethToDai} DAI to ${DaiToUsdc} USDC`);\n          const PL = ((Number(DaiToUsdc) - amounts) * 100) / amounts;\n          obj = {\n            forRequest: \"USDC -> WETH -> DAI -> USDC\",\n            resp1: `${amounts} USDC to ${UsdcToWeth} WETH`,\n            resp2: `${UsdcToWeth} WETH to ${WethToDai} DAI`,\n            resp3: `${WethToDai} DAI to ${DaiToUsdc} USDC`,\n          };\n          if (PL > 0) {\n            obj[\"resp4\"] = `Profit : ${PL.toFixed(2)}%\\n`;\n\n            console.log(`Profit : ${PL.toFixed(2)}%\\n`);\n          } else {\n            obj[\"resp4\"] = `Loss : ${PL.toFixed(2)}%\\n`;\n\n            console.log(`Loss : ${PL.toFixed(2)}%\\n`);\n          }\n          finalResult.push(obj);\n\n          break;\n        }\n      }\n      // if (i === _result.length - 1) {\n      //     console.log(\"finalResult==>>\", finalResult);\n      //     responses = ({ responseCode: 200, responseMessage: \"Data fetched successfully!\", responseResult: finalResult })\n      //     resolve(responses)\n      // }\n    }\n  } catch (error) {\n    console.log(\"error\", error);\n    return false;\n  }\n};\n","import React, { useEffect, useState } from \"react\";\nimport {\n  Grid,\n  Container,\n  Box,\n  Typography,\n  Button,\n  makeStyles,\n  TableContainer,\n  Table,\n  TableHead,\n  TableBody,\n  TableRow,\n  TableCell,\n  Paper,\n  TextField,\n} from \"@material-ui/core\";\nimport ClearIcon from \"@material-ui/icons/Clear\";\nimport ERC20ABI from \"src/ABI/IERC20ABI.json\";\nimport RouterABI from \"src/ABI/RouterABI.json\";\nimport FactoryABI from \"src/ABI/FactoryABI.json\";\nimport Web3 from \"web3\";\nimport axios from \"axios\";\nimport {\n  UniswapRouter,\n  ShibaswapRouter,\n  ShushiswapRouter,\n  UniswapFactory,\n  ShibaswapFactory,\n  ShushiswapFactory,\n  getWeb3Obj,\n  getWeb3ContractObject,\n  getContract,\n  ZeroAddress,\n  mainnetRPCURL,\n  fromWeiDecimals,\n} from \"src/utils\";\nimport moment from \"moment\";\nimport { array } from \"yup\";\nimport ButtonCircularProgress from \"src/component/ButtonCircularProgress\";\nimport { WETHToken } from \"src/constants/index\";\n// import ExchangeABI from \"src/ABI/ExchangeABI.json\";\n\nconst useStyles = makeStyles((theme) => ({\n  root1: {\n    overflowY: \"auto\",\n    scrollbarGutter: \"stable\",\n\n    \"&:-webkit-scrollbar\": {\n      width: \"2px\",\n    },\n\n    // /* Track */\n    \"&:-webkit-scrollbar-track\": {\n      boxShadow: \"inset 0 0 5px grey\",\n      borderRadius: \"10px\",\n    },\n\n    // /* Handle */\n    \"&:-webkit-scrollbar-thumb\": {\n      background: \"red\",\n      borderRadius: \"10px\",\n    },\n\n    // /* Handle on hover */\n    \"&:-webkit-scrollbar-thumb:hover\": {\n      background: \"#b30000\",\n    },\n  },\n  root: {\n    padding: \"0px !important\",\n    \"&:nth-of-type(odd)\": {\n      backgroundColor: theme.palette.background.table,\n      borderLeft: \"1px solid #A2A0A0\",\n      borderRight: \"1px solid #A2A0A0\",\n      borderRadius: \"8px\",\n    },\n  },\n  clearicons: {\n    position: \"absolute\",\n    top: \"6px\",\n    right: \"26px\",\n    color: \"#fff\",\n    cursor: \"pointer\",\n  },\n}));\nconst EstimatedProfits = ({\n  handleClose2,\n  SolutionCard,\n  inputValue,\n  swapFrom,\n}) => {\n  const classes = useStyles();\n  const [tokenPrice, setTokenPrice] = useState([]);\n  const EstimateProfit = async () => {\n    try {\n      let fromToken;\n      if (swapFrom.token == ZeroAddress) {\n        fromToken = WETHToken;\n      } else {\n        fromToken = swapFrom.token;\n      }\n      const listData = SolutionCard.filter(\n        (data) => data.heading != swapFrom.heading\n      );\n      const add = await Promise.all(\n        listData.map(async (data, i) => {\n          let ShibaSwap;\n          let UniSwap;\n          let ShushiSwap;\n          const UniswapFactoryObj = await getWeb3ContractObject(\n            FactoryABI,\n            UniswapFactory,\n            mainnetRPCURL\n          );\n          const web3 = await getWeb3Obj();\n          const amoutInWei = web3.utils.toWei(inputValue.toString());\n          const getUniSwapPair = await UniswapFactoryObj.methods\n            .getPair(fromToken, data.token)\n            .call();\n          if (ZeroAddress != getUniSwapPair) {\n            const UniswapRouterContract = await getWeb3ContractObject(\n              RouterABI,\n              UniswapRouter,\n              mainnetRPCURL\n            );\n            const UniyouGetPrice = await UniswapRouterContract.methods\n              .getAmountsOut(amoutInWei, [fromToken, data.token])\n              .call();\n            const returnedUniPrice = await UniswapRouterContract.methods\n              .getAmountsOut(UniyouGetPrice[1], [data.token, fromToken])\n              .call();\n            //   const finaldata = web3.utils.fromWei(ShibayouGetPrice[1], \"ether\");\n            let noOfProLos;\n            let status;\n            if (Number(returnedUniPrice[1]) > amoutInWei) {\n              noOfProLos = Number(returnedUniPrice[1]) - amoutInWei;\n              status = \"Profit\";\n            } else {\n              noOfProLos = amoutInWei - Number(returnedUniPrice[1]);\n              status = \"Loss\";\n            }\n            let PerCentage = (noOfProLos / amoutInWei) * 100;\n            let price = web3.utils.fromWei(noOfProLos.toString(), \"ether\");\n            UniSwap = {\n              price: price,\n              status: status,\n              PerCentage: PerCentage,\n            };\n          } else {\n            UniSwap = 0;\n          }\n\n          const ShibaswapFactoryObj = await getWeb3ContractObject(\n            FactoryABI,\n            ShibaswapFactory,\n            mainnetRPCURL\n          );\n          const getShibaSwapPair = await ShibaswapFactoryObj.methods\n            .getPair(fromToken, data.token)\n            .call();\n          if (ZeroAddress != getShibaSwapPair) {\n            const ShibaswapRouterContract = await getWeb3ContractObject(\n              RouterABI,\n              ShibaswapRouter,\n              mainnetRPCURL\n            );\n            //   const web3 = await getWeb3Obj();\n            //   const amoutInWei = web3.utils.toWei(inputValue.toString());\n            const ShibayouGetPrice = await ShibaswapRouterContract.methods\n              .getAmountsOut(amoutInWei, [fromToken, data.token])\n              .call();\n            const returnedShibaPrice = await ShibaswapRouterContract.methods\n              .getAmountsOut(ShibayouGetPrice[1], [data.token, fromToken])\n              .call();\n            const finaldata = web3.utils.fromWei(ShibayouGetPrice[1], \"ether\");\n            // ShibaSwap = web3.utils.fromWei(returnedShibaPrice[1], \"ether\");\n\n            let noOfProLos;\n            let status;\n            if (Number(returnedShibaPrice[1]) > amoutInWei) {\n              noOfProLos = Number(returnedShibaPrice[1]) - amoutInWei;\n              status = \"Profit\";\n            } else {\n              noOfProLos = amoutInWei - Number(returnedShibaPrice[1]);\n              status = \"Loss\";\n            }\n\n            let PerCentage = (noOfProLos / amoutInWei) * 100;\n            let price = web3.utils.fromWei(noOfProLos.toString(), \"ether\");\n\n            ShibaSwap = {\n              price: price,\n              status: status,\n              PerCentage: PerCentage,\n            };\n          } else {\n            ShibaSwap = 0;\n          }\n          const ShushiswapFactoryObj = await getWeb3ContractObject(\n            FactoryABI,\n            ShushiswapFactory,\n            mainnetRPCURL\n          );\n          const getShushiSwapPair = await ShushiswapFactoryObj.methods\n            .getPair(fromToken, data.token)\n            .call();\n          if (ZeroAddress != getShushiSwapPair) {\n            const ShushiswapRouterContract = await getWeb3ContractObject(\n              RouterABI,\n              ShushiswapRouter,\n              mainnetRPCURL\n            );\n            const ShushiyouGetPrice = await ShushiswapRouterContract.methods\n              .getAmountsOut(amoutInWei, [fromToken, data.token])\n              .call();\n            const returnedShushiPrice = await ShushiswapRouterContract.methods\n              .getAmountsOut(ShushiyouGetPrice[1], [data.token, fromToken])\n              .call();\n            let noOfProLos;\n            let status;\n            if (Number(returnedShushiPrice[1]) > amoutInWei) {\n              noOfProLos = Number(returnedShushiPrice[1]) - amoutInWei;\n              status = \"Profit\";\n            } else {\n              noOfProLos = amoutInWei - Number(returnedShushiPrice[1]);\n              status = \"Loss\";\n            }\n            let PerCentage = (noOfProLos / amoutInWei) * 100;\n            let price = web3.utils.fromWei(noOfProLos.toString(), \"ether\");\n            ShushiSwap = {\n              price: price,\n              status: status,\n              PerCentage: PerCentage,\n            };\n          } else {\n            ShushiSwap = 0;\n          }\n          const obj = {\n            ...data,\n            uniSwap: UniSwap,\n            shibaSwap: ShibaSwap,\n            shushiSwap: ShushiSwap,\n          };\n          return obj;\n        })\n      );\n      setTokenPrice(add);\n    } catch (error) {\n      console.log(\"error\", error);\n    }\n  };\n  useEffect(() => {\n    if (SolutionCard.length > 0) {\n      EstimateProfit();\n    }\n  }, [SolutionCard]);\n  return (\n    <Box className={`${classes.root1} mostly-customized-scrollbar`}>\n      <ClearIcon className={classes.clearicons} onClick={handleClose2} />\n      <TableContainer>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>\n                <Typography\n                  variant=\"body2\"\n                  style={{ fontWeight: \"500\", fontSize: \"20px\" }}\n                >\n                  {\" \"}\n                  Currency\n                </Typography>\n              </TableCell>\n              <TableCell align=\"center\" style={{ fontWeight: \"500\" }}>\n                <img src=\"./images/uniswap1.svg\" />\n                <br />\n                Uniswap\n              </TableCell>\n              <TableCell align=\"center\" style={{ fontWeight: \"500\" }}>\n                <img src=\"./images/dholak.png\" />\n                <br />\n                Shushiswap\n              </TableCell>\n              <TableCell align=\"center\" style={{ fontWeight: \"500\" }}>\n                <img src=\"./images/cat.png\" />\n                <br />\n                Shibaswap\n              </TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {tokenPrice &&\n              tokenPrice.map((data) => {\n                return (\n                  <TableRow className={classes.root}>\n                    <TableCell>\n                      <Box display=\"flex\" alignItems=\"center\">\n                        <img src={data.image} style={{ width: \"30px\" }} />\n                        <Box ml={3}>\n                          <Typography\n                            variant=\"body2\"\n                            style={{ fontWeight: \"600\" }}\n                          >\n                            {data.heading}\n                          </Typography>\n                          <Typography\n                            variant=\"body1\"\n                            style={{ fontWeight: \"400\", fontSize: \"13px\" }}\n                          >\n                            {data?.discription}\n                          </Typography>\n                        </Box>\n                      </Box>\n                    </TableCell>\n                    <TableCell align=\"center\">\n                      <Typography\n                        variant=\"body2\"\n                        style={\n                          data?.uniSwap.status == \"Loss\"\n                            ? { color: \"red\", fontWeight: \"500\" }\n                            : { color: \"#fff\", fontWeight: \"500\" }\n                        }\n                      >\n                        {/* {data?.uniSwap} */}\n                        {data?.uniSwap != 0\n                          ? `${data?.uniSwap.PerCentage} %`\n                          : \"No Liquidity\"}\n                      </Typography>\n                    </TableCell>\n                    <TableCell align=\"center\">\n                      <Typography\n                        variant=\"body2\"\n                        style={\n                          data?.shushiSwap.status == \"Loss\"\n                            ? { color: \"red\", fontWeight: \"500\" }\n                            : { color: \"#fff\", fontWeight: \"500\" }\n                        }\n                      >\n                        {/* {data?.shushiSwap} */}\n                        {data?.shushiSwap != 0\n                          ? `${data?.shushiSwap.PerCentage} %`\n                          : \"No Liquidity\"}\n                      </Typography>\n                    </TableCell>\n                    <TableCell align=\"center\">\n                      <Typography\n                        variant=\"body2\"\n                        style={\n                          data?.shibaSwap.status == \"Loss\"\n                            ? { color: \"red\", fontWeight: \"500\" }\n                            : { color: \"#fff\", fontWeight: \"500\" }\n                        }\n                      >\n                        {data?.shibaSwap != 0\n                          ? `${data?.shibaSwap.PerCentage} %`\n                          : \"No Liquidity\"}\n                      </Typography>\n                    </TableCell>\n                  </TableRow>\n                );\n              })}\n          </TableBody>\n        </Table>\n      </TableContainer>{\" \"}\n      {tokenPrice && tokenPrice.length == 0 && (\n        <Box\n          style={{\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            height: \"40px\",\n            width: \"100%\",\n          }}\n        >\n          <ButtonCircularProgress />{\" \"}\n          <Typography variant=\"body1\">Loading...</Typography>\n        </Box>\n      )}\n    </Box>\n  );\n};\n\nexport default EstimatedProfits;\n","import React, { useContext, useState, useEffect } from \"react\";\nimport {\n  Grid,\n  Container,\n  Box,\n  Typography,\n  Button,\n  makeStyles,\n  TableContainer,\n  Table,\n  TableHead,\n  TableBody,\n  TableRow,\n  TableCell,\n  Paper,\n  TextField,\n} from \"@material-ui/core\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport RegistrationABI from \"src/ABI/RegistrationABI.json\";\nimport PlayArrowIcon from \"@material-ui/icons/PlayArrow\";\nimport { useHistory } from \"react-router-dom\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport { BiChevronDown } from \"react-icons/bi\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Divider from \"@material-ui/core/Divider\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport { BsSearch } from \"react-icons/bs\";\nimport clsx from \"clsx\";\nimport { BiChevronLeft } from \"react-icons/bi\";\nimport { BiChevronRight } from \"react-icons/bi\";\nimport ClearIcon from \"@material-ui/icons/Clear\";\nimport ExchangeModal from \"./ExchangeModal\";\nimport { UserContext } from \"src/context/User\";\nimport { ShibaSwapFun } from \"./SwapExchange/ShibaSwapSDK\";\nimport { UniSwapFun } from \"./SwapExchange/UniSwapSDK\";\nimport ERC20ABI from \"src/ABI/IERC20ABI.json\";\nimport RouterABI from \"src/ABI/RouterABI.json\";\nimport FactoryABI from \"src/ABI/FactoryABI.json\";\nimport Web3 from \"web3\";\nimport axios from \"axios\";\nimport {\n  UniswapFactory,\n  // ShibaswapRouter,\n  ShushiswapFactory,\n  UniswapRouter,\n  ShibaswapRouter,\n  ShushiswapRouter,\n  getWeb3Obj,\n  getWeb3ContractObject,\n  getContract,\n  ExchangeContract,\n  mainnetRPCURL,\n  fromWeiDecimals,\n  ShibaswapFactory,\n  ZeroAddress,\n} from \"src/utils\";\nimport moment from \"moment\";\nimport { toast } from \"react-toastify\";\nimport WalletConnectModal from \"src/component/ConnectWallet/WalletConnectModal\";\nimport ButtonCircularProgress from \"src/component/ButtonCircularProgress\";\n// import { ShushiSwapFun } from \"./SwapExchange/ShushiSwapSDK\";\nimport ExchangeABI from \"src/ABI/ExchangeABI.json\";\nimport EstimatedProfits from \"./EstimatedProfits\";\nimport { ACTIVE_NETWORK, TokenAddressToUsed } from \"src/constants\";\nconst useStyles = makeStyles((theme) => ({\n  EstimatedP: {\n    \"& .MuiDialog-paper\": {\n      overflowY: \"scroll\",\n    },\n  },\n  wrapper: {\n    \"& .MuiDialog-paper\": {\n      overflowY: \"scroll\",\n    },\n    padding: \"158px 0px\",\n    [theme.breakpoints.down(\"xs\")]: {\n      padding: \"105px 0px\",\n    },\n  },\n  text: {\n    paddingLeft: \"5px\",\n    paddingTop: \"20px\",\n    paddingBottom: \"20px\",\n    \"& p\": {\n      letterSpaceing: \"1px\",\n      fontSize: \"17px\",\n      fontWeight: \"400\",\n      color: \"#14133b\",\n    },\n  },\n  text1: {\n    marginLeft: \"8px\",\n    \"& p\": {\n      letterSpaceing: \"1px\",\n      fontSize: \"17px\",\n      fontWeight: \"400\",\n      color: \"#14133b\",\n    },\n  },\n  text2: {\n    paddingBottom: \"20px\",\n    \"& p\": {\n      letterSpaceing: \"1px\",\n      fontSize: \"17px\",\n      fontWeight: \"400\",\n      color: \"#14133b\",\n    },\n  },\n  btn: {\n    display: \"flex\",\n    alignItems: \"center\",\n    \"& p\": {\n      \"@media (max-width:375px)\": {\n        fontSize: \"12px\",\n      },\n    },\n  },\n  playicon: {\n    width: \"25px\",\n    height: \"25px\",\n    borderRadius: \"50%\",\n    backgroundColor: \"#811793\",\n  },\n  mainbox: {\n    borderRadius: \"10px\",\n    boxShadow: \"0 0 40px 0 rgb(94 92 154 / 6%)\",\n    backgroundColor: \"#fff\",\n    padding: \"20px 20px\",\n  },\n  selectbox: {\n    display: \"flex\",\n    alignItems: \"center\",\n    paddingTop: \"10px\",\n    \"& img\": {\n      backgroundColor: theme.palette.background.paper,\n    },\n  },\n  ethbox: {\n    padding: \"10px 15px\",\n    borderRadius: \"10px\",\n    backgroundColor: \"#Ffffff\",\n    border: \"none\",\n    boxShadow: \"0 0 40px 0 rgb(94 92 154 / 6%)\",\n    \"& .tokenBalance\": {\n      display: \"flex\",\n      justifyContent: \"space-between\",\n    },\n    \"& input\": {\n      backgroundColor: \"transparent\",\n      border: \"none\",\n      color: \"#ffffff\",\n      fontWeight: 500,\n      textAlign: \"right\",\n      width: \"100%\",\n      fontSize: \"18px\",\n      lineHeight: \"30px\",\n      \"&:focus-visible\": {\n        outline: \"none !important\",\n      },\n    },\n    \"& h6\": {\n      color: \"rgba(20, 19, 59, 1)\",\n      fontWeight: \"600\",\n      fontSize: \"20px\",\n    },\n    \"& p\": {\n      color: \"rgba(20, 19, 59, 1)\",\n    },\n  },\n\n  ethbox1: {\n    padding: \"20px 20px\",\n    borderRadius: \"10px\",\n    backgroundColor: \"#F7F7F7\",\n    border: \"none\",\n    \"& .tokenBalance\": {\n      display: \"flex\",\n      justifyContent: \"space-between\",\n    },\n    \"& input\": {\n      backgroundColor: \"transparent\",\n      border: \"none\",\n      color: \"#ffffff\",\n      fontWeight: 500,\n      textAlign: \"right\",\n      width: \"100%\",\n      fontSize: \"18px\",\n      lineHeight: \"30px\",\n      \"&:focus-visible\": {\n        outline: \"none !important\",\n      },\n    },\n\n      \"& h6\": {\n        color: \"rgb(8, 86, 204) !important\",\n        fontWeight: \"600\",\n        fontSize: \"20px\",\n      },\n    \n    \"& p\": {\n      color: \"rgba(20, 19, 59, 1)\",\n    },\n  },\n  formControl: {\n    marginLeft: \"10px\",\n    \"& .MuiSelect-select.MuiSelect-select\": {\n      paddingRight: \"40px\",\n    },\n  },\n  ethereum: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    paddingTop: \"5px\",\n    \"& p\": {\n      color: \"rgba(20, 19, 59, 1)\",\n      fontWeight: \"400\",\n    },\n  },\n  swapbox: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    marginTop: \"1rem\",\n    // padding: \"0px 10px 0px 45px\",\n    fontSize: \"17px\",\n    fontWeight: \"400\",\n    [theme.breakpoints.down(\"xs\")]: {\n      padding: \"0px\",\n    },\n  },\n  childbox: {\n    cursor: \"pointer\",\n    border: \"0.1px solid #f3f2f3\",\n    borderRadius: \"5px\",\n    padding: \"5px 10px\",\n    background: \"#f3f2f3\",\n    [theme.breakpoints.down(\"xs\")]: {\n      padding: \"6px 8px\",\n      margin: \"5px\",\n    },\n  },\n  childbox1: {\n    // cursor: \"pointer\",\n    border: \"0.1px solid rgb(8, 86, 204)\",\n    padding: \"5px 10px\",\n    borderRadius: \"5px\",\n    background: \"#f3f2f3\",\n    [theme.breakpoints.down(\"xs\")]: {\n      padding: \"6px 8px\",\n      margin: \"5px\",\n    },\n  },\n  childgrid: {\n    marginTop: \"3rem\",\n    \"& p\": {\n      color: \"#14133b\",\n    },\n    \"& .Mui-disabled\": {\n      color: \"#ffffff82 !important\",\n      border: \"none\",\n    },\n  },\n  connetwallet: {\n    marginTop: \"10px\",\n    fontWeight: 500,\n  },\n  connetwallet12: {\n    marginTop: \"10px\",\n    fontWeight: 500,\n    cursor: \"no-drop\",\n    background: \"#3f4a51 !important\",\n    border: \"1px solid #3f4a51 !important\",\n  },\n  childgri88: {\n    \"& .MuiButton-contained.Mui-disabled\": {\n      cursor: \"no-drop\",\n    },\n  },\n  dialogbox: {\n    position: \"relative\",\n    padding: \"20px\",\n    maxHeight: \"95%\",\n    [theme.breakpoints.down(\"sm\")]: {\n      overflowY: \"scroll\",\n    },\n  },\n  favouritebtn: {\n    \"@media (max-width:390px)\": {\n      padding: \"10px 14px !important\",\n    },\n  },\n  icons: {\n    position: \"absolute\",\n    left: \"0px\",\n    top: \"12px\",\n    color: theme.palette.primary.main,\n  },\n  imagebox: {\n    display: \"flex\",\n    alignItems: \"center\",\n    backgroundColor: theme.palette.background.default,\n    borderRadius: \"8px\",\n    justifyContent: \"center\",\n    padding: \"10px\",\n    \"& p\": {\n      marginLeft: \"8px\",\n      color: \"#14133b\",\n    },\n  },\n  heading: {\n    marginLeft: \"25px\",\n  },\n  root: {\n    padding: \"0px !important\",\n    \"&:nth-of-type(odd)\": {\n      backgroundColor: theme.palette.background.table,\n      borderLeft: \"1px solid #A2A0A0\",\n      borderRight: \"1px solid #A2A0A0\",\n      borderRadius: \"8px\",\n    },\n  },\n  clearicons: {\n    position: \"absolute\",\n    top: \"0px\",\n    right: \"0px\",\n    color: \"#fff\",\n    cursor: \"pointer\",\n  },\n  head: {\n    fontWeight: \"400\",\n    fontSize: \"17px\",\n    color: \"#14133b\",\n    [theme.breakpoints.down(\"xs\")]: {\n      fontSize: \"16px\",\n    },\n  },\n  head12: {\n    margin: \"10px 0\",\n    padding: \"5px\",\n    \"& p\": {\n      fontFamily: \"Roboto\",\n      fontStyle: \"normal\",\n      fontWeight: \"400\",\n      fontSize: \"12px\",\n      lineHeight: \"14px\",\n    },\n    // borderTop: \"1px solid #cacaca36\",\n    // borderBottom: \"1px solid #cacaca4a\",\n  },\n  head1: {\n    margin: \"10px 0\",\n    padding: \"5px\",\n    borderTop: \"1px solid #cacaca36\",\n    borderBottom: \"1px solid #cacaca4a\",\n  },\n  cls: {\n    color: \"#FF5678 !important\",\n  },\n  clsProfit: {\n    color: \"#2BAD1B !important\",\n  },\n  clsLoss: {\n    color: \"red !important\",\n  },\n\n  iconBox: {\n    \"& svg\": {\n      color: \"rgba(20, 19, 59, 1)\",\n    },\n  },\n  EstimatedtextBix: {\n    display: \"flex\",\n    justifyContent: \"end\",\n    cursor: \"pointer\",\n    \"& svg\": {\n      color: \"#FFFFFF\",\n    },\n  },\n\n  btnColor: {\n    background: \"red !important\",\n    border: \"red !important\",\n    \"&:hover\": {\n      background: \"red !important\",\n      //   \"& svg\": {import { FactoryABI } from 'src/ABI/FactoryABI.json';\n\n      //     background: \"red\",\n      //   },\n    },\n  },\n}));\n\nfunction Exchange() {\n  const classes = useStyles();\n  const { activate, account, chainId, library, deactivate } = useWeb3React();\n  const user = useContext(UserContext); // onClick={user.connectWallet}\n  const history = useHistory();\n  const [open, setOpen] = React.useState(false);\n  const [openBuy, setOpenBuy] = React.useState(false);\n  const [open2, setOpen2] = React.useState(false);\n  const [swapName, setSwapName] = React.useState(\"uniSwap\");\n  const [swapName2, setSwapName2] = React.useState(\"uniSwap\");\n  const [tokenBuy, setTokenBuy] = React.useState();\n  const [tokenSell, setTokenSell] = React.useState();\n  const [openWallect, setOpenWallect] = useState(false);\n  const [fromBalance, setfromBalance] = useState(0);\n  const [toBalance, settoBalance] = useState(0);\n  const [buttonName, settoButtonName] = useState(\"Swap\");\n\n  const handleClickOpen = (name, type) => {\n    if (type == \"from\") {\n      setOpen(true);\n    }\n    if (type == \"to\") {\n      setOpenBuy(true);\n    }\n    setSelectedToken(name);\n    setSelectTokenType(type);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n    setOpenBuy(false);\n  };\n  const HandleWalletModal = () => {\n    setOpenWallect(true);\n    user.connectWallet();\n  };\n  const CloseWalletModal = () => {\n    setOpenWallect(false);\n  };\n  const handleClickOpen2 = () => {\n    setOpen2(true);\n  };\n  const handleClose2 = () => {\n    setOpen2(false);\n  };\n\n  const [alignment, setAlignment] = React.useState();\n  const [checked, setChecked] = React.useState(false);\n  const [swapFrom, setSwapFrom] = useState(TokenAddressToUsed[0]);\n  const [swapFromValue, setSwapFromValue] = useState(0);\n  const [swapToValue, setSwapToValue] = useState(0);\n  const [swapTo, setSwapTo] = useState();\n  const [selectedToken, setSelectedToken] = useState();\n  const [fromValue, setFromValue] = useState(\"\");\n  const [toValue, setToValue] = useState(\"\");\n  const [selectTokenType, setSelectTokenType] = useState();\n  const [inSufficientLiquidity, setInSufficientLiquidity] = useState();\n  const [isTokenApproval, setisTokenApproval] = useState(false);\n  const [tokenAllowance, settokenAllowance] = useState(\"\");\n  const [approveLoader, setApproveLoader] = useState(false);\n  const [swapLoader, setSwapLoader] = useState(false);\n  const [returenedValueS, setReturenedValueS] = useState(\"\");\n  const slippage = 12;\n  const swapTokenData = () => {\n    const tempFromData = { ...swapFrom };\n    const tempToData = { ...swapTo };\n    const tempFromValue = fromValue;\n    const tempToValue = toValue;\n    setSwapFrom(tempToData);\n    setSwapTo(tempFromData);\n    setFromValue(Number(tempToValue).toFixed(9).toString());\n    setToValue(Number(tempFromValue).toFixed(9).toString());\n  };\n\n  const getdata = () => {\n    const pancakeRouterContract = getContract(library, account);\n  };\n\n  const swapToken = async () => {\n    try {\n      setSwapLoader(true);\n      let SwapRouterF;\n      if (swapName == \"ShibaSwap\") {\n        SwapRouterF = ShibaswapRouter;\n      }\n      if (swapName == \"uniSwap\") {\n        SwapRouterF = UniswapRouter;\n      }\n      if (swapName == \"shushiSwap\") {\n        SwapRouterF = ShushiswapRouter;\n      }\n\n      if (account) {\n        let functionName;\n        const web3 = await getWeb3Obj();\n        const amoutInWei = web3.utils.toWei(fromValue);\n        const pancakeRouterContract = getContract(\n          SwapRouterF,\n          RouterABI,\n          library,\n          account\n        );\n\n        const tenPercent = Number(toValue) - (Number(toValue) / 100) * slippage;\n        const crtTime = moment(new Date()).add(20, \"minutes\").unix();\n\n        // if (swapFrom.type === \"noApprove\" && swapTo.type === \"approve\") {\n        const myContract = getContract(\n          swapFrom.token,\n          ERC20ABI,\n          library,\n          account\n        );\n\n        let allowance = await myContract.allowance(account, SwapRouterF);\n\n        if (Number(allowance) > Number(web3.utils.toWei(fromValue, \"gwei\"))) {\n          const amountsOutMin = await pancakeRouterContract.getAmountsOut(\n            amoutInWei,\n            [swapFrom?.token, swapTo?.token]\n          );\n          let FunName;\n          if (swapFrom.typeToken == \"Token\" && swapTo.typeToken == \"Token\") {\n            FunName = \"swapExactTokensForTokens\";\n          }\n          if (swapFrom.typeToken == \"Coin\" && swapTo.typeToken == \"Token\") {\n            FunName = \"swapExactETHForTokens\";\n          }\n          if (swapFrom.typeToken == \"Token\" && swapTo.typeToken == \"Coin\") {\n            FunName = \"swapTokensForExactETH\";\n          }\n          functionName = FunName;\n\n          let swapFun;\n          if (swapFrom.typeToken == \"Token\" && swapTo.typeToken == \"Token\") {\n            swapFun = await pancakeRouterContract.swapExactTokensForTokens(\n              amountsOutMin[0].toString(),\n              amountsOutMin[1].toString(),\n              [swapFrom.token, swapTo?.token],\n              account,\n              crtTime,\n              {\n                from: account,\n                value: 0,\n                gasPrice: \"10000000000\",\n                gasLimit: web3.utils.toHex(\"4500000\"),\n              }\n            );\n\n            await swapFun.wait();\n            setSwapLoader(false);\n            toast.success(\n              `${swapFrom.heading} exchange successfully with ${swapTo.heading}`\n            );\n          }\n          if (swapFrom.typeToken == \"Token\" && swapTo.typeToken == \"Coin\") {\n            swapFun = await pancakeRouterContract.swapExactTokensForETH(\n              amountsOutMin[0].toString(),\n              amountsOutMin[1].toString(),\n              // web3.utils.toWei(tenPercent.toFixed(9).toString(), \"gwei\"),\n              // web3.utils.toWei(tenPercent.toFixed(9).toString(), \"gwei\"),\n              [swapFrom.token, swapTo?.token],\n              account,\n              crtTime,\n              {\n                from: account,\n                value: 0,\n                gasPrice: \"10000000000\",\n                gasLimit: web3.utils.toHex(\"4500000\"),\n              }\n            );\n            await swapFun.wait();\n            setSwapLoader(false);\n            toast.success(\n              `${swapFrom.heading} exchange successfully with ${swapTo.heading}`\n            );\n          }\n          if (swapFrom.typeToken == \"Coin\" && swapTo.typeToken == \"Token\") {\n            swapFun = await pancakeRouterContract.swapExactETHForTokens(\n              web3.utils.toWei(tenPercent.toFixed(9).toString(), \"gwei\"),\n              [swapFrom.token, swapTo?.token],\n              account,\n              crtTime,\n              {\n                from: account,\n                value: web3.utils.toWei(fromValue),\n                gasPrice: \"10000000000\",\n                gasLimit: web3.utils.toHex(\"4500000\"),\n              }\n            );\n            await swapFun.wait();\n            setSwapLoader(false);\n            toast.success(\n              `${swapFrom.heading} exchange successfully with ${swapTo.heading}`\n            );\n          }\n        } else if (swapFrom.type === \"approve\" && swapTo.type === \"approve\") {\n          functionName =\n            \"swapExactTokensForTokensSupportingFeeOnTransferTokens\";\n          approveToken();\n          setSwapLoader(false);\n        } else {\n          functionName = \"swapExactTokensForETHSupportingFeeOnTransferTokens\";\n          approveToken();\n          setSwapLoader(false);\n        }\n      }\n    } catch (err) {\n      setSwapLoader(false);\n      console.log(err);\n\n      toast.error(\n        <span className={classes.toastStyl}>\n          {err.message.split(\":\")[err.message.split(\":\").length - 1]}\n        </span>\n      );\n    }\n  };\n  const swapTokenNew = async () => {\n    try {\n      const web3 = await getWeb3Obj();\n      const ExchangeContractObj = getContract(\n        ExchangeContract,\n        ExchangeABI,\n        library,\n        account\n      );\n      setSwapLoader(true);\n      let SwapRouterF;\n      if (swapName == \"ShibaSwap\") {\n        SwapRouterF = ShibaswapRouter;\n      }\n      if (swapName == \"uniSwap\") {\n        SwapRouterF = UniswapRouter;\n      }\n      if (swapName == \"shushiSwap\") {\n        SwapRouterF = ShushiswapRouter;\n      }\n      const AmountIn = web3.utils.toWei(fromValue);\n\n      const registration = await ExchangeContractObj.registration();\n\n      const registrationObj = getContract(\n        registration,\n        RegistrationABI,\n        library,\n        account\n      );\n\n      const userInfo = await registrationObj.userInfo(account); ///\n\n      if (!userInfo.isRegistered) {\n        const registerUser = await registrationObj.registerUser();\n        await registerUser.wait();\n      }\n      if (swapFrom?.type != \"nonApprove\" && swapTo?.type != \"nonApprove\") {\n        const exchangeTokens = await ExchangeContractObj.exchangeTokens(\n          SwapRouterF,\n          swapFrom.token,\n          swapTo.token,\n          AmountIn\n        );\n        await exchangeTokens.wait();\n      }\n      if (swapFrom?.type != \"nonApprove\" && swapTo?.type == \"nonApprove\") {\n        const exchangeTokens = await ExchangeContractObj.exchangeTokens(\n          SwapRouterF,\n          swapFrom.token,\n          swapTo.token,\n          AmountIn\n        );\n        toast.success(`${swapFrom.heading} swap with ${swapTo.heading}`);\n        await exchangeTokens.wait();\n      }\n\n      if (swapFrom?.type == \"nonApprove\" && swapTo?.type != \"nonApprove\") {\n        const exchangeTokens = await ExchangeContractObj.exchangeTokens(\n          SwapRouterF,\n          swapFrom.token,\n          swapTo.token,\n          0,\n          { value: AmountIn }\n        );\n        await exchangeTokens.wait();\n      }\n\n      setSwapLoader(false);\n    } catch (err) {\n      console.log(\"error\", err);\n      toast.error(\n        <span className={classes.toastStyl}>\n          {err.message.split(\":\")[err.message.split(\":\").length - 1]}\n        </span>\n      );\n      setSwapLoader(false);\n    }\n  };\n  const approveToken = async () => {\n    try {\n      setApproveLoader(true);\n      const web3 = await getWeb3Obj();\n      let SwapRouterF;\n      if (swapName == \"ShibaSwap\") {\n        SwapRouterF = ShibaswapRouter;\n      }\n      if (swapName == \"uniSwap\") {\n        SwapRouterF = UniswapRouter;\n      }\n      if (swapName == \"shushiSwap\") {\n        SwapRouterF = ShushiswapRouter;\n      }\n\n      const myContract = getContract(\n        swapFrom.token,\n        ERC20ABI,\n        library,\n        account\n      );\n\n      let allowance = await myContract.allowance(account, ExchangeContract);\n\n      if (Number(allowance) < Number(web3.utils.toWei(fromValue, \"gwei\"))) {\n        const allowance = await myContract.approve(\n          ExchangeContract,\n          \"115792089237316195423570985008687907853269984665640564039457584007913129639935\",\n          {\n            from: account,\n            gasPrice: \"50000000000\",\n            gasLimit: web3.utils.toHex(\"300000\"),\n          }\n        );\n        await allowance.wait();\n        checkMaxAllowance();\n        setApproveLoader(false);\n      } else {\n        settokenAllowance(Number(allowance));\n        setApproveLoader(false);\n      }\n    } catch (err) {\n      setApproveLoader(false);\n      toast.error(\n        <span className={classes.toastStyl}>\n          {err.message.split(\":\")[err.message.split(\":\").length - 1]}\n        </span>\n      );\n      console.log(err.message);\n    }\n  };\n\n  const estimateGas = async (functionName, tenPercent, crtTime) => {\n    let SwapRouterF;\n    if (swapName == \"ShibaSwap\") {\n      SwapRouterF = ShibaswapRouter;\n    }\n    if (swapName == \"uniSwap\") {\n      SwapRouterF = UniswapRouter;\n    }\n    if (swapName == \"shushiSwap\") {\n      SwapRouterF = ShushiswapRouter;\n    }\n\n    const pancakeRouterContract = await getWeb3ContractObject(\n      RouterABI,\n      SwapRouterF,\n      mainnetRPCURL\n    );\n    const web3 = await getWeb3Obj();\n\n    const amoutInWei = web3.utils.toWei(fromValue);\n\n    let gasEstimate;\n    if (swapFrom.type != \"nonApprove\") {\n      const tokensForETHTransfer = await getWeb3ContractObject(\n        ERC20ABI,\n        swapFrom?.token,\n        mainnetRPCURL\n      );\n\n      // gasEstimate =  tokensForETHTransfer.methods.myMethod(123).estimateGas({from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'})\n\n      // .then(function(gasAmount){\n      //     ...\n      // })\n      // .catch(function(error){\n      //     ...\n      // });\n      //\n\n      const amountsOutMin = await pancakeRouterContract.methods\n        .getAmountsOut(amoutInWei, [swapFrom?.token, swapTo?.token])\n        .call();\n      // gasEstimate = await pancakeRouterContract.methods[functionName](\n      //   // web3.utils.toWei(tenPercent.toFixed(9).toString(), \"gwei\"),\n      //   amountsOutMin[0],\n      //   amountsOutMin[1],\n      //   [swapFrom.token, swapTo?.token],\n      //   account,\n      //   crtTime\n      // ).estimateGas({\n      //   from: account,\n      //   value: web3.utils.toWei(fromValue),\n      // });\n      //  gasEstimate = async (fromAddress, toAddress, amount) => {\n\n      gasEstimate = await web3.eth.estimateGas({\n        to: SwapRouterF,\n        from: swapFrom.token,\n        value: web3.utils.toWei(`${fromValue}`, \"ether\"),\n      });\n    }\n    if (swapFrom.type == \"nonApprove\") {\n      gasEstimate = await pancakeRouterContract.methods[functionName](\n        web3.utils.toWei(tenPercent.toFixed(9).toString(), \"gwei\"),\n\n        [swapFrom.token, swapTo?.token],\n        account,\n        crtTime\n      ).estimateGas({\n        from: account,\n        value: web3.utils.toWei(fromValue),\n      });\n    }\n    return gasEstimate;\n  };\n\n  const SwapToValuesFunction = async () => {\n    try {\n      axios({\n        method: \"GET\",\n        // url: `https://api.pancakeswap.info/api/v2/tokens/${swapTo?.token}`,\n        url: `https://api.coingecko.com/api/v3/coins/ethereum/contract/${\"0xdAC17F958D2ee523a2206206994597C13D831ec7\"}`,\n      }).then(async (res) => {\n        if (res.status === 200) {\n          setSwapToValue(res.data.market_data?.current_price?.usd);\n          // setState(1);\n        }\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  useEffect(() => {\n    SwapToValuesFunction();\n  }, [swapTo?.token]);\n\n  // useEffect(async () => {\n  const SwapFromValuesFunction = async () => {\n    try {\n      axios({\n        method: \"GET\",\n        // url: `https://api.pancakeswap.info/api/v2/tokens/${swapFrom.token}`,\n        url: `https://api.coingecko.com/api/v3/coins/ethereum/contract/${\"0xdAC17F958D2ee523a2206206994597C13D831ec7\"}`,\n      }).then(async (res) => {\n        if (res.status === 200) {\n          setSwapFromValue(res.data.market_data?.current_price?.usd);\n        }\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  useEffect(() => {\n    SwapFromValuesFunction();\n  }, [swapFrom.token]);\n\n  const changeTokenName = async (data) => {\n    if (selectTokenType === \"from\") {\n      setSwapFrom(data);\n      try {\n        axios({\n          method: \"GET\",\n          // url: `https://api.pancakeswap.info/api/v2/tokens/${data.token}`,\n          url: `https://api.coingecko.com/api/v3/coins/ethereum/contract/${\"0xdAC17F958D2ee523a2206206994597C13D831ec7\"}`,\n        }).then(async (res) => {\n          if (res.status === 200) {\n            // setrewardTokenPrice(res.data.data.price);\n            // setState(1);\n          }\n        });\n      } catch (error) {\n        console.log(error);\n      }\n      if (fromValue != 0) {\n        const price = await recivePrice(\n          swapFrom.token,\n          swapFrom.type,\n          swapTo?.token,\n          swapTo?.type,\n          fromValue,\n          swapName\n        );\n        setToValue(Number(price).toFixed(9).toString());\n      }\n    } else {\n      setSwapTo(data);\n      if (toValue != 0) {\n        const price = await recivePrice(\n          swapTo?.token,\n          swapTo?.type,\n          swapFrom.token,\n          swapFrom.type,\n          toValue,\n          swapName\n        );\n        setFromValue(Number(price).toFixed(9).toString());\n      }\n    }\n    handleClose();\n    setAlignment();\n  };\n  const FromTokenBalance = async () => {\n    try {\n      if (account && swapFrom?.type != \"nonApprove\") {\n        const fromTokenContract = await getWeb3ContractObject(\n          ERC20ABI,\n          swapFrom?.token,\n          mainnetRPCURL\n        );\n\n        const fromTokenBalance = await fromTokenContract.methods\n          .balanceOf(account)\n          .call();\n        const fromDecimal = await fromTokenContract.methods.decimals().call();\n        setfromBalance(fromWeiDecimals(fromTokenBalance, fromDecimal));\n      }\n      if (account && swapFrom?.type == \"nonApprove\") {\n        // const fromTokenBalance = await fromTokenContract.methods\n        //   .balanceOf(account)\n        //   .call();\n        // const fromDecimal = await fromTokenContract.methods.decimals().call();\n\n        var web3 = new Web3(library.provider);\n        const balance = await web3.eth.getBalance(account);\n        const balanceImETH = await web3.utils.fromWei(balance);\n        setfromBalance(balanceImETH);\n      }\n    } catch (error) {\n      console.log(\"error\", error);\n    }\n  };\n  useEffect(() => {\n    FromTokenBalance();\n  }, [swapFrom?.token, account]);\n\n  const ToTokenBalance = async () => {\n    try {\n      if (account) {\n        const toTokenContract = await getWeb3ContractObject(\n          ERC20ABI,\n          swapTo?.token,\n          mainnetRPCURL\n        );\n\n        const toTokenBalance = await toTokenContract.methods\n          .balanceOf(account)\n          .call();\n        const toDecimal = await toTokenContract.methods.decimals().call();\n        settoBalance(fromWeiDecimals(toTokenBalance, toDecimal));\n      }\n    } catch (error) {\n      console.log(\"error\", error);\n    }\n  };\n  useEffect(() => {\n    if (swapTo?.token) {\n      ToTokenBalance();\n    }\n  }, [swapTo?.token, account]);\n  const changeTokenValue = async (value, type) => {\n    if (type === \"from\") {\n      setFromValue(value);\n\n      if (value > 0) {\n        const price = await recivePrice(\n          swapFrom.token,\n          swapFrom.type,\n          swapTo?.token,\n          swapTo?.type,\n          value,\n          swapName\n        );\n\n        setToValue(Number(price).toFixed(9).toString());\n      } else {\n        // setFromValue(\"\");\n        // setToValue(\"\");\n      }\n    } else {\n      setToValue(value);\n      if (value > 0) {\n        const price = await recivePrice(\n          swapTo?.token,\n          swapTo?.type,\n          swapFrom.token,\n          swapFrom.type,\n          value,\n          swapName\n        );\n        setFromValue(Number(price).toFixed(9).toString());\n      } else {\n        // setFromValue(\"\");\n        // setToValue(\"\");\n      }\n    }\n  };\n\n  const recivePrice = async (\n    fromToken,\n    fromType,\n    toToken,\n    toType,\n    inputValue,\n    SwapTypes\n  ) => {\n    try {\n      let SwapRouterF;\n      let SwapFactoryF;\n      if (SwapTypes == \"ShibaSwap\") {\n        SwapRouterF = ShibaswapRouter;\n        SwapFactoryF = ShibaswapFactory;\n      }\n      if (SwapTypes == \"uniSwap\") {\n        SwapRouterF = UniswapRouter;\n        SwapFactoryF = UniswapFactory;\n      }\n      if (SwapTypes == \"shushiSwap\") {\n        SwapRouterF = ShushiswapRouter;\n        SwapFactoryF = ShushiswapFactory;\n      }\n      const pancakeRouterContract = await getWeb3ContractObject(\n        RouterABI,\n        SwapRouterF,\n        mainnetRPCURL\n      );\n      const pancakeFactoryContract = await getWeb3ContractObject(\n        FactoryABI,\n        SwapFactoryF,\n        mainnetRPCURL\n      );\n      let TokenA;\n      let TokenB;\n\n      if (fromType == \"nonApprove\") {\n        const tokens = await pancakeRouterContract.methods.WETH().call();\n        TokenA = tokens;\n      } else {\n        TokenA = fromToken;\n      }\n      if (toType == \"nonApprove\") {\n        const tokens = await pancakeRouterContract.methods.WETH().call();\n        TokenB = tokens;\n      } else {\n        TokenB = toToken;\n      }\n\n      const web3 = await getWeb3Obj();\n      const amoutInWei = web3.utils.toWei(inputValue);\n\n      const GetPair = await pancakeFactoryContract.methods\n        .getPair(TokenA, TokenB)\n        .call();\n      if (GetPair != ZeroAddress) {\n        setInSufficientLiquidity(false);\n        const youGetPrice = await pancakeRouterContract.methods\n          .getAmountsOut(amoutInWei, [TokenA, TokenB])\n          .call();\n        const finaldata = web3.utils.fromWei(youGetPrice[1], \"ether\");\n        return finaldata;\n      } else {\n        setInSufficientLiquidity(true);\n      }\n    } catch (error) {\n      console.log(\"error----\", error);\n    }\n  };\n  const ReturnedValuesInProfit = async () => {\n    if (toValue > 0) {\n      const price = await recivePrice(\n        swapTo?.token,\n        swapTo?.type,\n        swapFrom?.token,\n        swapFrom?.type,\n        toValue,\n        swapName\n      );\n      setReturenedValueS(Number(price).toFixed(9).toString());\n    }\n  };\n  useEffect(() => {\n    ReturnedValuesInProfit();\n  }, [toValue, swapName2, swapName]);\n\n  useEffect(() => {\n    if (swapTo?.token) {\n      changeTokenValue(fromValue, \"from\");\n    }\n  }, [account, swapTo?.token, swapFrom?.token]);\n  //isTokenApproval\n  const checkMaxAllowance = async () => {\n    const web3 = await getWeb3Obj();\n\n    const myContract = getContract(swapFrom.token, ERC20ABI, library, account);\n\n    let allowance = await myContract.allowance(account, ExchangeContract);\n\n    settokenAllowance(Number(allowance));\n    try {\n    } catch (error) {\n      console.log(\"error\", error);\n    }\n  };\n  useEffect(() => {\n    if (swapFrom.type == \"approve\") {\n      setisTokenApproval(true);\n      checkMaxAllowance();\n    } else {\n      setisTokenApproval(false);\n    }\n  }, [swapFrom.type, swapFrom.token, account]);\n\n  return (\n    <Box className={classes.wrapper}>\n      <Container maxWidth=\"md\">\n        {openWallect && (\n          <WalletConnectModal\n            open={openWallect}\n            handleClose={CloseWalletModal}\n          />\n        )}\n        <Grid\n          container\n          spacing={3}\n          alignItems=\"flex-start\"\n          justifyContent=\"center\"\n        >\n          <Grid\n            item\n            lg={7}\n            md={6}\n            sm={12}\n            xs={12}\n            // style={{ alignItems: \"flex-start\" }}\n          >\n            <Container className=\"p-0\">\n              <Box style={{ maxWidth: \"120px\" }}>\n                <img src=\"./images/logo.svg\" alt=\"logo\" />\n              </Box>\n              <Box className={classes.text}>\n                <Typography variant=\"body2\">\n                  Velit integer eget lobortis est netus. Eget risus ullamcorper\n                  orci pharetra risus. Tellus augue in nibh blandit. Eu tortor\n                  adipiscing rhoncus habitant nec. Elit dui bibendum nibh\n                  sapien.\n                </Typography>\n              </Box>\n              <Box className={classes.text2}>\n                <Typography variant=\"body2\">\n                  Velit integer eget lobortis est netus. Eget risus ullamcorper\n                  orci pharetra risus. Tellus augue in nibh blandit. Eu tortor\n                  adipiscing rhoncus habitant nec. Elit dui bibendum nibh\n                  sapien.\n                </Typography>\n              </Box>\n              <Box className={classes.btn}>\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  className={classes.favouritebtn}\n                  onClick={() => {\n                    history.push({\n                      pathname: \"/cross-exchange\",\n                    });\n                  }}\n                >\n                  favourite\n                </Button>\n                <Box display=\"flex\" ml={4} alignItems=\"center\">\n                  <Box className={classes.playicon}>\n                    <PlayArrowIcon style={{ color: \"#fff\" }} />\n                  </Box>\n\n                  <Box className={classes.text1}>\n                    <Typography variant=\"body2\">\n                      Step by Step Tutorial\n                    </Typography>\n                  </Box>\n                </Box>\n              </Box>\n            </Container>\n          </Grid>\n          <Grid item lg={5} md={6} sm={12} xs={12}>\n            <Paper className={classes.mainbox}>\n              <Box className={`numberTextField ${classes.ethbox1}`}>\n                <Box className=\"tokenBalance\">\n                  <Typography variant=\"body1\">You Sell</Typography>\n                  {account && (\n                    <Typography variant=\"body1\">\n                      Balance : &nbsp; {parseFloat(fromBalance).toFixed(4)}\n                    </Typography>\n                  )}\n                </Box>\n                <Box\n                  style={{\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    justifyContent: \"space-between\",\n                  }}\n                >\n                  <Box className={classes.selectbox}>\n                    <img\n                      src={swapFrom.image}\n                      alt=\"token\"\n                      // style={{ width: \"20px\" }}\n                      style={{\n                        cursor: \"pointer\",\n                        width: \"20px\",\n                      }}\n                      onClick={() => handleClickOpen(swapFrom?.heading, \"from\")}\n                    />\n                    <Box ml={2}>\n                      <Typography\n                        variant=\"h6\"\n                        style={{ cursor: \"pointer\", whiteSpace: \"pre\" }}\n                        onClick={() =>\n                          handleClickOpen(swapFrom?.heading, \"from\")\n                        }\n                      >\n                        {swapFrom.heading}\n                        <BiChevronDown />\n                      </Typography>\n                    </Box>\n                  </Box>\n                  <Box>\n                    {/* <Typography variant=\"h6\">0.998833</Typography> */}{\" \"}\n                    <input\n                      type=\"number\"\n                      // min={0}\n                      placeholder=\"0.0\"\n                      value={fromValue}\n                      onChange={(e) => changeTokenValue(e.target.value, \"from\")}\n                    />\n                  </Box>\n                </Box>\n                <Box className={classes.ethereum}>\n                  <Typography variant=\"body1\">\n                    {swapFrom.discription}\n                  </Typography>\n                  <Typography variant=\"body1\">\n                    ~${(parseFloat(swapFromValue) * fromValue).toFixed(4)}\n                  </Typography>\n                </Box>\n              </Box>\n\n              <Box mt={2} className={`numberTextField ${classes.ethbox}`}>\n                <Box className=\"tokenBalance\">\n                  <Typography variant=\"body1\">You Buy</Typography>\n                  {account && swapTo && (\n                    <Typography variant=\"body1\">\n                      Balance : &nbsp; {parseFloat(toBalance).toFixed(4)}\n                    </Typography>\n                  )}\n                </Box>\n                {!swapTo ? (\n                  <Box\n                    style={{\n                      display: \"flex\",\n                      alignItems: \"center\",\n                      justifyContent: \"space-between\",\n                      // }}\n                      // // style={{\n                      //   width: \"30px\",\n                      //   height: \"30px\",\n                      cursor: \"pointer\",\n                    }}\n                    // onClick={handleClickOpenBuy}\n                    onClick={() => handleClickOpen(swapTo?.heading, \"to\")}\n                  >\n                    <Box\n                      className={classes.selectbox}\n                      style={{ paddingTop: \"0px\" }}\n                    >\n                      {/* <img src=\"./images/ETH.png\" /> */}\n                      <Box>\n                        <Typography variant=\"h6\">Select token</Typography>\n                      </Box>\n                    </Box>\n                    <Box className={classes.iconBox}>\n                      <BiChevronDown\n                        style={{\n                          width: \"30px\",\n                          height: \"30px\",\n                          cursor: \"pointer\",\n                        }}\n                        // onClick={handleClickOpenBuy}\n                        // onClick={() => handleClickOpen(swapTo?.heading, \"to\")}\n                      />\n                    </Box>\n                  </Box>\n                ) : (\n                  <>\n                    {/* ______--------------------------- */}\n                    <Box\n                      style={{\n                        display: \"flex\",\n                        alignItems: \"center\",\n                        justifyContent: \"space-between\",\n                      }}\n                    >\n                      <Box className={classes.selectbox}>\n                        <img\n                          src={swapTo?.image}\n                          alt=\"\"\n                          style={{ width: \"20px\" }}\n                        />\n                        <Box ml={2}>\n                          <Typography\n                            variant=\"h6\"\n                            style={{ cursor: \"pointer\" }}\n                            onClick={() =>\n                              handleClickOpen(swapTo?.heading, \"to\")\n                            }\n                          >\n                            {swapTo?.heading}\n                            <BiChevronDown />\n                          </Typography>\n                        </Box>\n                      </Box>\n                      <Box>\n                        {/* <Typography variant=\"h6\">0.998833</Typography> */}{\" \"}\n                        <input\n                          type=\"number\"\n                          min={0}\n                          placeholder=\"0.0\"\n                          value={toValue}\n                          onChange={(e) =>\n                            changeTokenValue(e.target.value, \"to\")\n                          }\n                        />\n                      </Box>\n                    </Box>\n                    <Box className={classes.ethereum}>\n                      <Typography variant=\"body1\">\n                        {swapTo?.discription}\n                      </Typography>\n                      <Typography variant=\"body1\">\n                        ~${(parseFloat(swapToValue) * toValue).toFixed(4)}\n                      </Typography>\n                    </Box>\n                  </>\n                )}\n                {/* ______--------------------------- */}\n              </Box>\n              <Box className={classes.swapbox}>\n                <Box\n                  className={\n                    swapName == \"uniSwap\" ? classes.childbox1 : classes.childbox\n                  }\n                  onClick={() => setSwapName(\"uniSwap\")}\n                >\n                  <Typography variant=\"body2\" className={classes.head}>\n                    Uniswap\n                  </Typography>\n                </Box>\n                <Box\n                  className={\n                    swapName == \"ShibaSwap\"\n                      ? classes.childbox1\n                      : classes.childbox\n                  }\n                  onClick={() => setSwapName(\"ShibaSwap\")}\n                >\n                  <Typography variant=\"body2\" className={classes.head}>\n                    Shibaswap\n                  </Typography>\n                </Box>\n                <Box\n                  className={\n                    swapName == \"shushiSwap\"\n                      ? classes.childbox1\n                      : classes.childbox\n                  }\n                  onClick={() => setSwapName(\"shushiSwap\")}\n                >\n                  <Typography variant=\"body2\" className={classes.head}>\n                    Shushiswap\n                  </Typography>\n                </Box>\n              </Box>\n              {/* ---------------------------AUTOMATICA-------------------------- */}\n\n              {account &&\n                swapTo &&\n                fromValue < fromBalance &&\n                fromValue != \"\" &&\n                toValue > 0 &&\n                fromValue > 0 && (\n                  // returenedValueS > fromValue &&\n                  // (fromValue == \"NaN\" ||\n                  //   fromValue == \"\" ||\n                  //   toValue == \"NaN\" ||\n                  //   toValue == NaN ||\n                  //   toValue == \"\" ||\n                  //   toValue == 0 ||\n                  //   fromValue == 0) &&\n                  <Box pt={2}>\n                    <Box className={`numberTextField ${classes.ethbox}`}>\n                      <Box className=\"tokenBalance\">\n                        <Typography variant=\"body1\">You Sell</Typography>\n                        {/* {account && (<Typography variant=\"body1\">Balance : &nbsp; {parseFloat(fromBalance).toFixed(4)}</Typography>)} */}\n                      </Box>\n                      <Box\n                        style={{\n                          display: \"flex\",\n                          alignItems: \"center\",\n                          justifyContent: \"space-between\",\n                        }}\n                      >\n                        <Box className={classes.selectbox}>\n                          <img\n                            src={swapTo?.image}\n                            alt=\"token\"\n                            style={{ width: \"20px\" }}\n                          />\n                          <Box ml={2}>\n                            <Typography\n                              variant=\"h6\"\n                              style={{ cursor: \"pointer\" }}\n                              // onClick={() => handleClickOpen(swapTo?.heading, \"from\")}\n                            >\n                              {swapTo?.heading}\n                              <BiChevronDown />\n                            </Typography>\n                          </Box>\n                        </Box>\n                        <Box>\n                          {/* <Typography variant=\"h6\">0.998833</Typography> */}{\" \"}\n                          <input\n                            type=\"number\"\n                            // min={0}\n                            placeholder=\"0.0\"\n                            value={toValue}\n                            // onChange={(e) => changeTokenValue(e.target.value, \"from\")}\n                          />\n                        </Box>\n                      </Box>\n                      <Box className={classes.ethereum}>\n                        <Typography variant=\"body1\">\n                          {swapTo?.discription}\n                        </Typography>\n                        <Typography variant=\"body1\">\n                          {/* ~${(parseFloat(swapFromValue) * fromValue).toFixed(4)} */}\n                        </Typography>\n                      </Box>\n                    </Box>\n\n                    <Box mt={2} className={`numberTextField ${classes.ethbox}`}>\n                      <Box className=\"tokenBalance\">\n                        <Typography variant=\"body1\">You Buy</Typography>\n                        {/* {account && swapTo && (<Typography variant=\"body1\">Balance : &nbsp; {parseFloat(toBalance).toFixed(4)}</Typography>)} */}\n                      </Box>\n\n                      {/* ______--------------------------- */}\n                      <Box\n                        style={{\n                          display: \"flex\",\n                          alignItems: \"center\",\n                          justifyContent: \"space-between\",\n                        }}\n                      >\n                        <Box className={classes.selectbox} mt={0}>\n                          <img\n                            src={swapFrom?.image}\n                            alt=\"\"\n                            style={{ width: \"20px\" }}\n                          />\n                          <Box ml={2}>\n                            <Typography\n                              variant=\"h6\"\n                              style={{ cursor: \"pointer\" }}\n                              // onClick={() => handleClickOpen(swapFrom?.heading, \"to\")}\n                            >\n                              {swapFrom?.heading}\n                              <BiChevronDown />\n                            </Typography>\n                          </Box>\n                        </Box>\n                        <Box>\n                          {/* <Typography variant=\"h6\">0.998833</Typography> */}{\" \"}\n                          <input\n                            type=\"number\"\n                            min={0}\n                            placeholder=\"0.0\"\n                            value={returenedValueS} //new profit found\n                            // onChange={(e) => changeTokenValue(e.target.value, \"to\")}\n                          />\n                        </Box>\n                      </Box>\n                      <Box className={classes.ethereum}>\n                        <Typography variant=\"body1\">\n                          {swapFrom?.discription}\n                        </Typography>\n                        <Typography variant=\"body1\">\n                          {/* ~${(parseFloat(swapToValue) * toValue).toFixed(4)} */}\n                        </Typography>\n                      </Box>\n                      {/* </>)} */}\n                      {/* ______--------------------------- */}\n                    </Box>\n                  </Box>\n                )}\n              {/* ------------------------AUTOMATICA------------------------- */}\n              <Box className={classes.childgri88}>\n                <Grid container className={classes.head12}>\n                  <Grid item lg={6} md={6} sm={6} xs={6} mt={2}>\n                    <Typography variant=\"body2\">Transfer Fee</Typography>\n                  </Grid>\n                  <Grid\n                    item\n                    lg={6}\n                    md={6}\n                    sm={6}\n                    xs={6}\n                    mt={3}\n                    style={{\n                      display: \"flex\",\n                      justifyContent: \"end\",\n                      alignItems: \"center\",\n                    }}\n                  >\n                    <Box className={classes.EstimatedtextBix}>\n                      <Typography variant=\"body1\" style={{ color: \"#FF5678\" }}>\n                        2.8%\n                      </Typography>\n                    </Box>\n                  </Grid>\n                </Grid>\n                {account &&\n                  swapTo &&\n                  fromValue < fromBalance &&\n                  fromValue != \"\" && (\n                    <Grid container className={classes.head12}>\n                      <Grid item lg={6} md={6} sm={6} xs={6} mt={2}>\n                        <Typography variant=\"body2\">Profit</Typography>\n                      </Grid>\n                      <Grid\n                        item\n                        lg={6}\n                        md={6}\n                        sm={6}\n                        xs={6}\n                        mt={3}\n                        style={{\n                          display: \"flex\",\n                          justifyContent: \"end\",\n                          alignItems: \"center\",\n                        }}\n                      >\n                        {/* <Grid item lg={6} md={6} sm={6} xs={6} align=\"right\"> */}\n                        {parseFloat(returenedValueS) >\n                          parseFloat(fromValue) && (\n                          <Typography\n                            variant=\"body1\"\n                            className={classes.clsProfit}\n                          >\n                            {((parseFloat(fromValue) -\n                              parseFloat(returenedValueS)) /\n                              parseFloat(returenedValueS)) *\n                              100}{\" \"}\n                            %\n                          </Typography>\n                        )}\n                        {parseFloat(returenedValueS) <\n                          parseFloat(fromValue) && (\n                          <Typography\n                            variant=\"body1\"\n                            className={classes.clsLoss}\n                          >\n                            {((parseFloat(fromValue) -\n                              parseFloat(returenedValueS)) /\n                              parseFloat(returenedValueS)) *\n                              100}{\" \"}\n                            %\n                          </Typography>\n                        )}\n                      </Grid>\n                    </Grid>\n                  )}\n                {/* <Box className={classes.childgrid}>\n                      <Grid container spacing={1}>\n                        <Grid item lg={6} md={6} sm={6} xs={6}>\n                          <Typography variant=\"body2\">Profit</Typography>\n                        </Grid>\n                        <Grid item lg={6} md={6} sm={6} xs={6} align=\"right\">\n                          {parseFloat(returenedValueS) >\n                            parseFloat(fromValue) && (\n                            <Typography\n                              variant=\"body1\"\n                              className={classes.clsProfit}\n                            >\n                              {((parseFloat(fromValue) -\n                                parseFloat(returenedValueS)) /\n                                parseFloat(returenedValueS)) *\n                                100}{\" \"}\n                              %\n                            </Typography>\n                          )}\n                          {parseFloat(returenedValueS) <\n                            parseFloat(fromValue) && (\n                            <Typography\n                              variant=\"body1\"\n                              className={classes.clsLoss}\n                            >\n                              {((parseFloat(fromValue) -\n                                parseFloat(returenedValueS)) /\n                                parseFloat(returenedValueS)) *\n                                100}{\" \"}\n                              %\n                            </Typography>\n                          )}\n                        </Grid>\n                      </Grid>\n                    </Box> */}\n\n                <Grid container className={classes.head1}>\n                  <Grid item lg={6} md={6} sm={6} xs={6} mt={2}>\n                    <Typography\n                      variant=\"body2\"\n                      style={{ color: \"#14133b\", fontWeight: \"400\" }}\n                    >\n                      Profitpath\n                    </Typography>\n                  </Grid>\n                  <Grid\n                    item\n                    lg={6}\n                    md={6}\n                    sm={6}\n                    xs={6}\n                    mt={3}\n                    style={{\n                      display: \"flex\",\n                      justifyContent: \"end\",\n                      alignItems: \"center\",\n                    }}\n                  >\n                    <Box className={classes.EstimatedtextBix}>\n                      <Typography\n                        variant=\"body1\"\n                        onClick={handleClickOpen2}\n                        style={{ color: \"#14133b\", fontWeight: \"400\" }}\n                      >\n                        Estimated profits\n                      </Typography>\n                      <BiChevronRight onClick={handleClickOpen2} />\n                    </Box>\n                  </Grid>\n                </Grid>\n                {account ? (\n                  <>\n                    {chainId == ACTIVE_NETWORK ? (\n                      <>\n                        {swapTo ? (\n                          <>\n                            {fromValue != 0 ? (\n                              <>\n                                {fromValue < fromBalance ? (\n                                  <>\n                                    {/* {returenedValueS > fromValue ? ( */}\n                                    <>\n                                      {isTokenApproval && (\n                                        <>\n                                          {tokenAllowance == 0 ? (\n                                            <Button\n                                              variant=\"contained\"\n                                              color=\"primary\"\n                                              fullWidth\n                                              className={classes.connetwallet}\n                                              // onClick={SwapExchange}\n                                              onClick={approveToken}\n                                              disabled={approveLoader}\n                                            >\n                                              Allow Protocal to use your{\" \"}\n                                              {swapFrom?.heading}\n                                              {approveLoader && (\n                                                <ButtonCircularProgress />\n                                              )}\n                                            </Button>\n                                          ) : (\n                                            <Button\n                                              variant=\"contained\"\n                                              color=\"primary\"\n                                              fullWidth\n                                              className={classes.connetwallet}\n                                              disabled\n                                            >\n                                              You can now trade{\" \"}\n                                              {swapFrom?.heading}\n                                            </Button>\n                                          )}\n                                        </>\n                                      )}\n                                      <Button\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        fullWidth\n                                        className={classes.connetwallet}\n                                        // onClick={SwapExchange}\n                                        onClick={swapTokenNew}\n                                        disabled={\n                                          approveLoader ||\n                                          swapLoader ||\n                                          (isTokenApproval &&\n                                            tokenAllowance == 0) ||\n                                          inSufficientLiquidity\n                                        }\n                                      >\n                                        {inSufficientLiquidity\n                                          ? \"Insufficient liquidity for this trade.\"\n                                          : buttonName}\n                                        {swapLoader && (\n                                          <ButtonCircularProgress />\n                                        )}\n                                      </Button>\n                                    </>\n                                    {/* ) : (\n                                  <Button\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    fullWidth\n                                    className={classes.connetwallet}\n                                    disabled\n                                  >\n                                    No profit path for {swapFrom?.heading} to{\" \"}\n                                    {swapTo?.heading}\n                                  </Button>\n                                )} */}\n                                  </>\n                                ) : (\n                                  <Button\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    fullWidth\n                                    className={classes.connetwallet12}\n                                    // disabled\n                                  >\n                                    Insufficient {swapFrom?.heading} balance\n                                  </Button>\n                                )}\n                              </>\n                            ) : (\n                              <Button\n                                variant=\"contained\"\n                                color=\"primary\"\n                                fullWidth\n                                className={classes.connetwallet12}\n                                // disabled\n                              >\n                                Enter an amount\n                              </Button>\n                            )}\n                          </>\n                        ) : (\n                          <>\n                            {/* {chainId == ACTIVE_NETWORK ? ( */}\n                            <Button\n                              variant=\"contained\"\n                              color=\"primary\"\n                              fullWidth\n                              className={classes.connetwallet12}\n                              // disabled\n                            >\n                              Select Token\n                            </Button>\n                          </>\n                        )}\n                      </>\n                    ) : (\n                      <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        fullWidth\n                        className={classes.btnColor}\n                        // disabled\n                        onClick={() => setOpenWallect(true)}\n                      >\n                        You are on wrong network\n                      </Button>\n                    )}\n                  </>\n                ) : (\n                  <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    fullWidth\n                    className={classes.connetwallet}\n                    // onClick={user.connectWallet}\n                    onClick={HandleWalletModal}\n                  >\n                    Connect Wallet\n                  </Button>\n                )}\n              </Box>\n            </Paper>\n          </Grid>\n        </Grid>\n      </Container>\n\n      <Dialog open={open} onClose={handleClose} fullWidth maxWidth=\"sm\">\n        <ExchangeModal\n          handleClose={handleClose}\n          detailscard={TokenAddressToUsed}\n          setTokenSelect={changeTokenName}\n          tokensToDisabled={swapTo}\n          SelectedTokens={swapFrom}\n        />\n      </Dialog>\n\n      <Dialog open={openBuy} onClose={handleClose} fullWidth maxWidth=\"sm\">\n        <ExchangeModal\n          handleClose={handleClose}\n          detailscard={TokenAddressToUsed}\n          setTokenSelect={changeTokenName}\n          SelectedTokens={swapTo}\n          tokensToDisabled={swapFrom}\n        />\n      </Dialog>\n      {/* <--Estimated Profits--> */}\n      <Dialog open={open2} onClose={handleClose2} fullWidth maxWidth=\"lg\">\n        <EstimatedProfits\n          handleClose2={handleClose2}\n          SolutionCard={TokenAddressToUsed}\n          swapFrom={swapFrom}\n          SwapTypes={swapName}\n          inputValue={fromValue ? fromValue : 1}\n        />\n      </Dialog>\n    </Box>\n  );\n}\nexport default Exchange;\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M8 5v14l11-7z\"\n}), 'PlayArrow');\n\nexports.default = _default;"],"sourceRoot":""}