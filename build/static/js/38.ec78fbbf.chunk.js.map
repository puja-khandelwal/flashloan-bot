{"version":3,"sources":["views/pages/Auth/Reset/Index.jsx"],"names":["useStyles","makeStyles","theme","resetmainSection","marginTop","height","zIndex","position","overflowY","fontWeight","color","fontSize","margin","maxWidth","width","maxHeight","marginBottom","ResetPassword","history","useHistory","classes","location","useLocation","useState","showPassword","setShowPassword","showPassword1","setShowPassword1","isUpdating","setIsUpdating","formValidationSchema","yep","shape","newPassword","trim","matches","required","min","max","confirmPassword","oneOf","handleFormSubmit","values","a","axios","method","url","ApiConfig","resetPassword","headers","token","state","data","password","response","console","log","responseCode","toast","success","responseMessage","push","error","className","elevation","align","variant","initialValues","validationSchema","onSubmit","errors","handleBlur","handleChange","touched","handleSubmit","setFieldValue","mt","fullWidth","placeholder","type","name","value","Boolean","onBlur","onChange","InputProps","endAdornment","onClick","edge","mb"],"mappings":"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","file":"static/js/38.ec78fbbf.chunk.js","sourcesContent":["import {\n  Box,\n  Button,\n  FormHelperText,\n  IconButton,\n  InputAdornment,\n  Paper,\n  TextField,\n  Typography,\n  makeStyles,\n} from \"@material-ui/core\";\nimport * as yep from \"yup\";\nimport React, { useState } from \"react\";\nimport { Form, Formik } from \"formik\";\nimport { HiEye, HiEyeOff } from \"react-icons/hi\";\nimport { useHistory } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\nimport ButtonCircularProgress from \"src/component/ButtonCircularProgress\";\nimport { useLocation } from \"react-router-dom\";\nimport ApiConfig from \"src/config/APICongig\";\nimport axios from \"axios\";\nimport PageLoading from \"src/component/PageLoading\";\nconst useStyles = makeStyles((theme) => ({\n  resetmainSection: {\n    \"& .MuiFormControl-fullWidth\": {\n      marginTop: \"8px\",\n    },\n    \"& .forgotMainBox\": {\n      height: \"100dvh\",\n      zIndex: \"9\",\n      position: \"relative\",\n      overflowY: \"auto\",\n      \"& p\": {\n        fontWeight: \"400\",\n        color: \"rgba(61, 61, 61, 1)\",\n      },\n      \"& h2\": {\n        color: \"rgba(243, 109, 54, 1)\",\n        fontSize: \"40px\",\n      },\n      \"& .forgotBox\": {\n        height: \"initail\",\n        margin: \"0px auto\",\n        maxWidth: \"95%\",\n        width: \"550px\",\n        maxHeight: \"100%\",\n      },\n\n      \"& h6\": {\n        color: \"rgba(61, 61, 61, 1)\",\n        fontWeight: \"500\",\n        fontSize: \"16px\",\n      },\n      \"& .forgotText\": {\n        color: \"rgba(43, 145, 239, 1)\",\n        fontWeight: 600,\n      },\n      \"& label\": {\n        color: \"rgba(61, 61, 61, 1)\",\n      },\n      \"& .descriptionText\": {\n        \"& p\": {\n          color: \"rgba(0, 0, 0, 0.40)\",\n        },\n        \"& span\": {\n          fontWeight: 600,\n          color: \" rgba(255, 85, 0, 1)\",\n        },\n      },\n      \"& .logoBox\": {\n        \"& img\": {\n          width: \"100%\",\n          height: \"50px\",\n          marginBottom: \"24px\",\n        },\n      },\n      \"& .iconColor\": {\n        color: \"#585757\",\n        fontSize: \"20px\",\n      },\n    },\n  },\n}));\nexport default function ResetPassword() {\n  const history = useHistory();\n  const classes = useStyles();\n  const location = useLocation();\n  const [showPassword, setShowPassword] = useState(false);\n  const [showPassword1, setShowPassword1] = useState(false);\n  const [isUpdating, setIsUpdating] = useState(false);\n\n  const formInitialSchema = {\n    newPassword: \"\",\n    confirmPassword: \"\",\n  };\n\n  const formValidationSchema = yep.object().shape({\n    newPassword: yep\n      .string()\n      .trim()\n      .matches(\n        /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[!@#$%^&*()\\-_=+{}[\\]|;:'\",.<>/?])[a-zA-Z\\d!@#$%^&*()\\-_=+{}[\\]|;:'\",.<>/?]{8,}$/,\n        \"Password must contain 8 characters, one uppercase, one lowercase, one number and one special case character.\"\n      )\n      .required(\"Please enter a new password.\")\n      .min(8, \"The new password must be at least 8 characters long.\")\n      .max(20, \"The new password cannot exceed 20 characters.\"),\n\n    confirmPassword: yep\n      .string()\n      .required(\"Please enter the confirmation password.\")\n      .oneOf([yep.ref(\"newPassword\"), null], \"Passwords Doesn't match.\"),\n  });\n\n  const handleFormSubmit = async (values) => {\n    try {\n      setIsUpdating(true);\n      const response = await axios({\n        method: \"PUT\",\n        url: ApiConfig.resetPassword,\n        headers: {\n          token: location?.state?.token,\n        },\n        data: {\n          password: values.newPassword,\n          confirmPassword: values.confirmPassword,\n        },\n      });\n      console.log(\"responseresponse==>>>\", response);\n      if (response.data.responseCode === 200) {\n        toast.success(response.data.responseMessage);\n        history.push(\"/login\");\n        setIsUpdating(false);\n      } else {\n        toast.error(response.data.responseMessage);\n        setIsUpdating(false);\n      }\n    } catch (error) {\n      setIsUpdating(false);\n    }\n  };\n  return (\n    <Box className={classes.resetmainSection}>\n      <Box className=\"forgotMainBox displayCenter\">\n        <Box className=\"forgotBox\">\n          <Paper elevation={2}>\n            <Box className=\"displayColumn\" align=\"center\">\n              <Typography variant=\"h2\">Reset Password</Typography>\n            </Box>\n            <Formik\n              initialValues={formInitialSchema}\n              validationSchema={formValidationSchema}\n              onSubmit={(values) => handleFormSubmit(values)}\n            >\n              {({\n                errors,\n                handleBlur,\n                handleChange,\n                handleSubmit,\n                touched,\n                values,\n                setFieldValue,\n              }) => (\n                <Form>\n                  <Box mt={2} className=\"mainTextBox\">\n                    <label>New Password</label>\n                    <TextField\n                      fullWidth\n                      variant=\"outlined\"\n                      placeholder=\"Password\"\n                      type={showPassword ? \"text\" : \"password\"}\n                      name=\"newPassword\"\n                      value={values.newPassword}\n                      error={Boolean(touched.newPassword && errors.newPassword)}\n                      onBlur={handleBlur}\n                      onChange={handleChange}\n                      InputProps={{\n                        endAdornment: (\n                          <InputAdornment position=\"end\">\n                            <IconButton\n                              onClick={() => setShowPassword(!showPassword)}\n                              edge=\"end\"\n                            >\n                              <Box>\n                                {showPassword ? (\n                                  <HiEye className={\"iconColor\"} />\n                                ) : (\n                                  <HiEyeOff className={\"iconColor\"} />\n                                )}\n                              </Box>\n                            </IconButton>\n                          </InputAdornment>\n                        ),\n                      }}\n                    />\n                    <FormHelperText error className=\"errorMessage\">\n                      {touched.newPassword && errors.newPassword}\n                    </FormHelperText>\n                  </Box>\n                  <Box mt={3} className=\"mainTextBox\">\n                    <label>Confirm Password</label>\n                    <TextField\n                      fullWidth\n                      variant=\"outlined\"\n                      placeholder=\"Confirm password\"\n                      type={showPassword1 ? \"text\" : \"password\"}\n                      name=\"confirmPassword\"\n                      value={values.confirmPassword}\n                      error={Boolean(\n                        touched.confirmPassword && errors.confirmPassword\n                      )}\n                      onBlur={handleBlur}\n                      onChange={handleChange}\n                      InputProps={{\n                        endAdornment: (\n                          <InputAdornment position=\"end\">\n                            <IconButton\n                              onClick={() => setShowPassword1(!showPassword1)}\n                              edge=\"end\"\n                            >\n                              <Box>\n                                {showPassword1 ? (\n                                  <HiEye className={\"iconColor\"} />\n                                ) : (\n                                  <HiEyeOff className={\"iconColor\"} />\n                                )}\n                              </Box>\n                            </IconButton>\n                          </InputAdornment>\n                        ),\n                      }}\n                    />\n                    <FormHelperText error className=\"errorMessage\">\n                      {touched.confirmPassword && errors.confirmPassword}\n                    </FormHelperText>\n                  </Box>\n\n                  <Box mb={2} mt={4} className=\"displayCenter\">\n                    <Button\n                      variant=\"contained\"\n                      color=\"primary\"\n                      type=\"submit\"\n                      fullWidth\n                    >\n                      Reset Password\n                      {isUpdating && <ButtonCircularProgress />}\n                    </Button>\n                  </Box>\n                </Form>\n              )}\n            </Formik>\n          </Paper>\n        </Box>\n      </Box>\n      {/* {openSucessfullModal && (\n        <SucessfullModal\n          open={openSucessfullModal}\n          img={\"/images/checkMark.png\"}\n          heading=\"Password Changed Successfully!\"\n          description={\n            \"In publishing and graphic design, Lorem ipsum is a  relying on meaningful content.\"\n          }\n          handleClose={() => {\n            setOpenSucessfullModal(false);\n            router.push(\"/auth/login\");\n          }}\n        />\n      )} */}\n      {isUpdating && <PageLoading />}\n    </Box>\n  );\n}\n"],"sourceRoot":""}