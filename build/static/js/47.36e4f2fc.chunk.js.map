{"version":3,"sources":["views/pages/StaticPages/ContactUs.js"],"names":["useStyles","makeStyles","theme","wrapper","paddingTop","paddingBottom","breakpoints","down","border","background","color","NewBreed","padding","fontSize","fontWeight","input","display","cls","borderRadius","Register","classes","history","useHistory","useState","isUpdating1","isUpdating","setIsUpdating","setCountryCode","ContactUsSubmitApiHandler","values","a","console","log","axios","method","url","ApiConfig","addContactUs","data","email","firstName","lastName","mobileNumber","message","res","responseCode","toast","success","responseMessage","push","className","container","spacing","justifyContent","alignItems","item","xs","md","align","smDown","src","alt","width","initialValues","initialStatus","successMsg","validationSchema","yep","shape","required","min","max","matches","onSubmit","errors","handleBlur","handleChange","handleSubmit","touched","setFieldValue","noValidate","textAlign","pt","mb","variant","lg","sm","fullWidth","style","placeholder","name","size","value","error","Boolean","onBlur","onChange","marginTop","country","phone","e","dialCode","inputStyle","height","backgroundColor","multiline","rows","rowsMax","inputProps","maxLength","type","disabled"],"mappings":"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","file":"static/js/47.36e4f2fc.chunk.js","sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\nimport {\n  Grid,\n  Box,\n  Container,\n  Typography,\n  makeStyles,\n  TextField,\n  FormHelperText,\n  Paper,\n  Table,\n  Link,\n  Icon,\n  RadioGroup,\n  FormControlLabel,\n  Select,\n  MenuItem,\n  FormControl,\n  InputLabel,\n  TextareaAutosize,\n  Button,\n  Radio,\n  Hidden,\n} from \"@material-ui/core\";\nimport {} from \"react-feather\";\nimport \"react-phone-input-2/lib/style.css\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { UserContext } from \"src/context/User\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport { isValidEmail } from \"src/utils\";\nimport PhoneInput from \"react-phone-input-2\";\nimport * as yep from \"yup\";\nimport { Formik, ErrorMessage, Form } from \"formik\";\nimport ButtonCircularProgress from \"src/component/ButtonCircularProgress\";\nimport ApiConfig from \"src/config/APICongig\";\nimport { values } from \"lodash\";\n\nconst useStyles = makeStyles((theme) => ({\n  wrapper: {\n    paddingTop: \"150px\",\n    paddingBottom: \"50px\",\n    [theme.breakpoints.down(\"sm\")]: {\n      paddingTop: \"80px\",\n    },\n    \"& .MuiOutlinedInput-input:-webkit-autofill\": {\n      \"-webkit-text-fill-color\": \"#0c0d31 !important\",\n    },\n    \"&  .flag-dropdown\": {\n      border: \"1px solid #cacaca !important\",\n      //   background: \"#1a2c38 !important\",\n      //   color: \"#fff !important\",\n    },\n    \"& .selected-flag\": {\n      background: \"#1056cc !important\",\n      color: \"#0c0d31 !important\",\n      // border: \"none\",\n    },\n    \"& .country-list\": {\n      background: \"#1056cc !important\",\n      color: \"#fff !important\",\n    },\n  },\n\n  NewBreed: {\n    // backgroundColor: \"#0F212E\",\n    padding: \"20px\",\n    \"& input::placeholder\": {\n      fontSize: \"13px\",\n      fontWeight: 300,\n    },\n    \"& p\":{\n      color: \"#0c0d31\",\n      fontWeight:\"400\",\n    },\n    \"& h3\": {\n      color: \"#0c0d31\",\n    },\n    \"& .MuiOutlinedInput-multiline\": {\n      padding: \"10.5px 14px\",\n    },\n  },\n\n  input: {\n    display: \"none\",\n  },\n  cls: {\n    borderRadius: \"0px\",\n    // paddingTop: \"10px\",\n    fontSize: \"13px\",\n  },\n}));\n\nexport default function Register() {\n  const classes = useStyles();\n  const history = useHistory();\n  const [isUpdating1, setIsUpdating1] = useState(false);\n  const [isUpdating, setIsUpdating] = useState(false);\n  const [confirmation, setConfirmation] = useState(false);\n  const [countryCode, setCountryCode] = useState(\"\");\n  const [email, setemail] = useState(\"\");\n\n  const ContactUsSubmitApiHandler = async (values) => {\n    console.log(\"values----\", values);\n\n    try {\n      setIsUpdating(true);\n\n      const res = await axios({\n        method: \"POST\",\n        url: ApiConfig.addContactUs,\n        data: {\n          email: values.email,\n          firstName: values.firstName,\n          lastName: values.lastName,\n          mobileNumber: values.mobileNumber,\n          message: values.message,\n        },\n      });\n      if (res.data.responseCode === 200) {\n        toast.success(res.data.responseMessage);\n        history.push(\"/\");\n        setIsUpdating(false);\n      }\n      setIsUpdating(false);\n    } catch (error) {\n      console.log(error);\n      setIsUpdating(false);\n    }\n  };\n\n  return (\n    <Box className={classes.wrapper}>\n      <Container>\n        <Grid container spacing={2} justifyContent=\"center\" alignItems=\"center\">\n          <Grid item xs={12} md={6} align=\"center\">\n            <Hidden smDown>\n              <img\n                src=\"images/contactus.png\"\n                alt=\"Register Images\"\n                width=\"100%\"\n              />\n            </Hidden>\n          </Grid>\n          <Grid item xs={12} md={6}>\n            <Formik\n              initialValues={{\n                firstName: \"\",\n                lastName: \"\",\n                mobileNumber: \"\",\n                message: \"\",\n                email: \"\",\n              }}\n              initialStatus={{\n                success: false,\n                successMsg: \"\",\n              }}\n              validationSchema={yep.object().shape({\n                firstName: yep\n                  .string()\n                  .required(\"First name is required.\")\n                  .min(3, \"Should be 3 character long\")\n                  .max(30, \"should not exceed 30 characters\"),\n\n                lastName: yep\n                  .string()\n                  .required(\"Last name is required .\")\n                  .min(3, \"Should be 3 character long\")\n                  .max(10, \"should not exceed 10 characters\"),\n                mobileNumber: yep\n                  .string()\n                  .required(\"Mobile number is required .\")\n                  // .matches(/^[0-9]+$/, \"Must be only 10 digits\")\n                  .max(13, \"should not exceed 10 digits\")\n                  .min(9, \"Must be only 9 digits\"),\n\n                email: yep\n                  .string()\n                  .required(\"Email address is required.\")\n                  .matches(\n                    /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n                    \"Please enter a valid email address\"\n                  ),\n                message: yep\n                  .string()\n                  .required(\"Description is required .\")\n                  .min(3, \"Should be 3 character long\")\n                  .max(500, \"should not exceed 500 characters\"),\n                // .required(\"Email address is required\"),\n              })}\n              onSubmit={ContactUsSubmitApiHandler}\n            >\n              {({\n                errors,\n                handleBlur,\n                handleChange,\n                handleSubmit,\n                touched,\n                values,\n                setFieldValue,\n              }) => {\n                console.log(\"values...........\", values.mobileNumber);\n                return (\n                  <Form noValidate onSubmit={handleSubmit}>\n                    {isUpdating1 ? (\n                      <Box textAlign=\"center\" pt={4}>\n                        <CircularProgress />\n                      </Box>\n                    ) : (\n                      <Paper className={classes.NewBreed}>\n                        <Box mb={2} align=\"center\">\n                          <Typography variant=\"h3\">Contact Us</Typography>\n                        </Box>\n\n                        <Grid container spacing={2}>\n                          <Grid item md={6} lg={6} sm={12} xs={12}>\n                            <FormControl fullWidth>\n                              <Typography\n                                variant=\"body2\"\n                                style={{\n                                  paddingBottom: \"3px\",\n                            \n                                }}\n                              >\n                                First Name\n                              </Typography>\n\n                              <TextField\n                                variant=\"outlined\"\n                                placeholder=\"Enter first name\"\n                                name=\"firstName\"\n                                size=\"small\"\n                                fullWidth=\"true\"\n                                value={values.firstName}\n                                error={Boolean(\n                                  touched.firstName && errors.firstName\n                                )}\n                                onBlur={handleBlur}\n                                onChange={handleChange}\n                              />\n                              <FormHelperText error>\n                                {touched.firstName && errors.firstName}\n                              </FormHelperText>\n                            </FormControl>\n                          </Grid>\n\n                          <Grid item md={6} lg={6} sm={12} xs={12}>\n                            <FormControl fullWidth>\n                              <Typography\n                                variant=\"body2\"\n                                style={{\n                                  paddingBottom: \"3px\",\n                                }}\n                              >\n                                Last Name\n                              </Typography>\n\n                              <TextField\n                                variant=\"outlined\"\n                                placeholder=\"Enter last name\"\n                                name=\"lastName\"\n                                size=\"small\"\n                                fullWidth=\"true\"\n                                value={values.lastName}\n                                error={Boolean(\n                                  touched.lastName && errors.lastName\n                                )}\n                                onBlur={handleBlur}\n                                onChange={handleChange}\n                              />\n                              <FormHelperText error>\n                                {touched.lastName && errors.lastName}\n                              </FormHelperText>\n                            </FormControl>\n                          </Grid>\n\n                          <Grid item md={6} lg={6} sm={12} xs={12}>\n                            <FormControl fullWidth>\n                              <Typography\n                                variant=\"body2\"\n                                style={{\n                                  paddingBottom: \"6px\",\n                                }}\n                              >\n                                Mobile Number\n                              </Typography>\n                              <PhoneInput\n                                style={{ marginTop: \"-3px\" }}\n                                country={\"in\"}\n                                name=\"mobileNumber\"\n                                placeholder=\"Enter mobile number\"\n                                value={values.mobileNumber}\n                                error={Boolean(\n                                  touched.mobileNumber && errors.mobileNumber\n                                )}\n                                onBlur={handleBlur}\n                                onChange={(phone, e) => {\n                                  setCountryCode(e.dialCode);\n                                  setFieldValue(\"mobileNumber\", phone);\n                                }}\n                                inputStyle={{\n                                  width: \"100%\",\n                                  height: \"41px\",\n                                  backgroundColor: \"transparent\",\n\n                                  color: \"#0c0d31\",\n                                  border: \"1px solid #9F9A9A\",\n                                }}\n                              />\n\n                              <FormHelperText error>\n                                {touched.mobileNumber && errors.mobileNumber}\n                              </FormHelperText>\n                            </FormControl>\n                          </Grid>\n\n                          <Grid item md={6} lg={6} sm={12} xs={12}>\n                            <FormControl fullWidth>\n                              <Typography\n                                variant=\"body2\"\n                                style={{\n                                  paddingBottom: \"3px\",\n                                }}\n                              >\n                                Email Address\n                              </Typography>\n\n                              <TextField\n                                variant=\"outlined\"\n                                placeholder=\"Enter email address\"\n                                name=\"email\"\n                                value={values.email}\n                                fullWidth=\"true\"\n                                size=\"small\"\n                                error={Boolean(touched.email && errors.email)}\n                                onBlur={handleBlur}\n                                onChange={handleChange}\n                              />\n                              <FormHelperText error>\n                                {touched.email && errors.email}\n                              </FormHelperText>\n                            </FormControl>\n                          </Grid>\n                          <Grid item lg={12} md={12} xs={12}>\n                            <FormControl fullWidth>\n                              <Typography\n                                variant=\"body2\"\n                                style={{\n                                  paddingBottom: \"3px\",\n                                }}\n                              >\n                                Description\n                              </Typography>\n                              <TextField\n                                name=\"message\"\n                                placeholder=\"Write something...\"\n                                value={values.message}\n                                style={{ marginTop: \"0px\" }}\n                                variant=\"outlined\"\n                                fullWidth\n                                multiline\n                                rows={4}\n                                rowsMax={4}\n                                inputProps={{\n                                  className: classes.cls,\n                                  maxLength: 800,\n                                }}\n                                onBlur={handleBlur}\n                                onChange={handleChange}\n                                error={Boolean(\n                                  touched.message && errors.message\n                                )}\n                              />\n                              <FormHelperText error>\n                                {touched.message && errors.message}\n                              </FormHelperText>\n                            </FormControl>\n                          </Grid>\n                        </Grid>\n\n                        <Box pt={3} align=\"center\">\n                          <Button\n                            type=\"submit\"\n                            variant=\"contained\"\n                            color=\"primary\"\n                            size=\"large\"\n                            disabled={isUpdating}\n\n                            // onClick={\n                            //   setIsUpdating(false)}\n                          >\n                            Register now\n                            {isUpdating && <ButtonCircularProgress />}\n                          </Button>\n                        </Box>\n                      </Paper>\n                    )}\n                  </Form>\n                );\n              }}\n            </Formik>\n          </Grid>\n        </Grid>\n      </Container>\n    </Box>\n  );\n}\n"],"sourceRoot":""}