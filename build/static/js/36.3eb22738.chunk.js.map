{"version":3,"sources":["views/pages/Auth/ChangePassword/index.js"],"names":["useStyles","makeStyles","theme","paperBox","padding","breakpoints","down","mainbox","position","zIndex","textBox","color","textheadBox","paddingBottom","borderBottom","fontSize","changePassword","subheading","fontWeight","ChangePassword","history","useHistory","classes","useLocation","useState","showPassword","setShowPassword","showPassword1","setShowPassword1","showPassword2","setShowPassword2","isUpdating","setIsUpdating","formValidationSchema","yep","shape","oldPassword","trim","matches","required","min","max","newPassword","notOneOf","confirmPassword","oneOf","handleFormSubmit","values","a","patchAPIHandler","endPoint","dataToSend","response","data","responseCode","window","sessionStorage","setItem","result","token","toast","success","responseMessage","push","error","elevation","className","onClick","goBack","src","width","style","cursor","variant","initialValues","validationSchema","onSubmit","errors","handleBlur","handleChange","touched","handleSubmit","setFieldValue","container","spacing","item","xs","sm","md","mt","mb","fullWidth","placeholder","type","name","value","Boolean","onBlur","onChange","InputProps","endAdornment","edge","disabled"],"mappings":"oaAsBMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,SAAS,aACPC,QAAS,QACRF,EAAMG,YAAYC,KAAK,MAAQ,CAC9BF,QAAS,SAGbG,QAAQ,aACNC,SAAU,WACVJ,QAAS,SACTK,OAAQ,OAEPP,EAAMG,YAAYC,KAAK,MAAQ,CAC9BF,QAAS,WAIbM,QAAS,CACP,OAAQ,CACNC,MAAO,wBAGXC,YAAa,CACXC,cAAe,MACfC,aAAc,sBACd,OAAQ,CACNC,SAAU,OACVJ,MAAO,sBAGXK,eAAgB,CACd,MAAO,IAGTC,WAAY,CACV,MAAO,CAELN,MAAO,UACPO,WAAY,YAKH,SAASC,IACtB,IAAMC,EAAUC,cACVC,EAAUtB,IAEhB,GADiBuB,cACuBC,oBAAS,IAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAA0CF,oBAAS,GAAnD,mBAAOG,EAAP,KAAsBC,EAAtB,KACA,EAA0CJ,oBAAS,GAAnD,mBAAOK,EAAP,KAAsBC,EAAtB,KACA,EAAoCN,oBAAS,GAA7C,mBAAOO,EAAP,KAAmBC,EAAnB,KAQMC,EAAuBC,MAAaC,MAAM,CAC9CC,YAAaF,MAEVG,OACAC,QACC,iEACA,gIAEDC,SAAS,6BACTC,IAAI,EAAG,qCACPC,IAAI,GAAI,oCACXC,YAAaR,MAEVG,OACAM,SACC,CAACT,IAAQ,eAAgB,MACzB,gDAEDI,QACC,iEACA,gIAEDC,SAAS,6BACTC,IAAI,EAAG,qCACPC,IAAI,GAAI,oCAEXG,gBAAiBV,MAEdK,SAAS,iCACTM,MACC,CAACX,IAAQ,eAAgB,MACzB,sDAIAY,EAAgB,uCAAG,WAAOC,GAAP,eAAAC,EAAA,sEAErBhB,GAAc,GAFO,SAGEiB,YAAgB,CACrCC,SAAU,iBACVC,WAAY,CACVf,YAAaW,EAAOX,YACpBM,YAAaK,EAAOL,YACpBE,gBAAiBG,EAAOH,mBARP,OAWc,OAR7BQ,EAHe,QAWRC,KAAKC,cAChBC,OAAOC,eAAeC,QAAQ,QAASL,EAASC,KAAKK,OAAOC,OAC5DC,IAAMC,QAAQT,EAASC,KAAKS,iBAC5B1C,EAAQ2C,KAAK,kBAEbH,IAAMI,MAAMZ,EAASC,KAAKS,iBAE5B9B,GAAc,GAlBO,gDAoBrBA,GAAc,GApBO,yDAAH,sDAwBtB,OACE,kBAAC,IAAD,CAAOiC,UAAW,EAAGC,UAAW5C,EAAQnB,UACtC,kBAAC,IAAD,CAAK+D,UAAW5C,EAAQV,aACtB,kBAAC,IAAD,CAAKsD,UAAU,gBACb,yBACEC,QAAS,kBAAM/C,EAAQgD,OAAO,MAC9BC,IAAI,wBACJC,MAAM,OACNC,MAAO,CAAEC,OAAQ,aALrB,WAQE,kBAAC,IAAD,CAAYC,QAAQ,KAAKF,MAAO,CAAE5D,MAAO,0BAAzC,qBAKJ,kBAAC,IAAD,CAAKuD,UAAW5C,EAAQN,gBACtB,kBAAC,IAAD,CACE0D,cAnFkB,CACxBtC,YAAa,GACbM,YAAa,GACbE,gBAAiB,IAiFX+B,iBAAkB1C,EAClB2C,SAAU,SAAC7B,GAAD,OAAYD,EAAiBC,MAEtC,gBACC8B,EADD,EACCA,OACAC,EAFD,EAECA,WACAC,EAHD,EAGCA,aAEAC,GALD,EAICC,aAJD,EAKCD,SACAjC,EAND,EAMCA,OAND,EAOCmC,cAPD,OASC,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAMC,WAAS,EAACC,QAAS,GACvB,kBAAC,IAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAC7B,kBAAC,IAAD,CAAMH,MAAI,EAACC,GAAI,IACb,kBAAC,IAAD,CAAKG,GAAI,GACP,kBAAC,IAAD,CACEC,GAAI,EACJjB,QAAQ,QACRF,MAAO,CACLxD,SAAU,OACVJ,MAAO,wBALX,gBAUA,kBAAC,IAAD,CACEgF,WAAS,EACTlB,QAAQ,WACRmB,YAAY,eACZC,KAAMhE,EAAgB,OAAS,WAC/BiE,KAAK,cACLC,MAAOhD,EAAOX,YACd4B,MAAOgC,QACLhB,EAAQ5C,aAAeyC,EAAOzC,aAEhC6D,OAAQnB,EACRoB,SAAUnB,EACVoB,WAAY,CACVC,aACE,kBAAC,IAAD,CAAgB5F,SAAS,OACvB,kBAAC,IAAD,CACE2D,QAAS,kBAAMrC,GAAkBD,IACjCwE,KAAK,OAEL,kBAAC,IAAD,KACGxE,EACC,kBAAC,IAAD,CAAOqC,UAAU,eAEjB,kBAAC,IAAD,CAAUA,UAAU,qBAQlC,kBAAC,IAAD,CAAgBF,OAAK,GAClBgB,EAAQ5C,aAAeyC,EAAOzC,eAIrC,kBAAC,IAAD,CAAMiD,MAAI,EAACC,GAAI,IACb,kBAAC,IAAD,CAAKG,GAAI,GACP,kBAAC,IAAD,CACEC,GAAI,EACJjB,QAAQ,QACRF,MAAO,CACLxD,SAAU,OACVJ,MAAO,wBALX,gBAUA,kBAAC,IAAD,CACEgF,WAAS,EACTlB,QAAQ,WACRmB,YAAY,WACZC,KAAMpE,EAAe,OAAS,WAC9BqE,KAAK,cACLC,MAAOhD,EAAOL,YACdsB,MAAOgC,QACLhB,EAAQtC,aAAemC,EAAOnC,aAEhCuD,OAAQnB,EACRoB,SAAUnB,EACVoB,WAAY,CACVC,aACE,kBAAC,IAAD,CAAgB5F,SAAS,OACvB,kBAAC,IAAD,CACE2D,QAAS,kBAAMzC,GAAiBD,IAChC4E,KAAK,OAEL,kBAAC,IAAD,KACG5E,EAAe,kBAAC,IAAD,MAAY,kBAAC,IAAD,YAOxC,kBAAC,IAAD,CAAgBuC,OAAK,GAClBgB,EAAQtC,aAAemC,EAAOnC,eAIrC,kBAAC,IAAD,CAAM2C,MAAI,EAACC,GAAI,IACb,kBAAC,IAAD,CAAKG,GAAI,GACP,kBAAC,IAAD,CACEC,GAAI,EACJjB,QAAQ,QACRF,MAAO,CACLxD,SAAU,OACVJ,MAAO,wBALX,oBAUA,kBAAC,IAAD,CACEgF,WAAS,EACTlB,QAAQ,WACRmB,YAAY,mBACZC,KAAMlE,EAAgB,OAAS,WAC/BmE,KAAK,kBACLC,MAAOhD,EAAOH,gBACdoB,MAAOgC,QACLhB,EAAQpC,iBAAmBiC,EAAOjC,iBAEpCqD,OAAQnB,EACRoB,SAAUnB,EACVoB,WAAY,CACVC,aACE,kBAAC,IAAD,CAAgB5F,SAAS,OACvB,kBAAC,IAAD,CACE2D,QAAS,kBAAMvC,GAAkBD,IACjC0E,KAAK,OAEL,kBAAC,IAAD,KACG1E,EACC,kBAAC,IAAD,CAAOuC,UAAU,eAEjB,kBAAC,IAAD,CAAUA,UAAU,qBAQlC,kBAAC,IAAD,CAAgBF,OAAK,GAClBgB,EAAQpC,iBAAmBiC,EAAOjC,qBAO7C,kBAAC,IAAD,CAAKsB,UAAU,YAAYuB,GAAI,GAC7B,kBAAC,IAAD,CACEhB,QAAQ,YACR9D,MAAM,UACNkF,KAAK,SACLS,SAAUvE,GAJZ,SAOGA,GAAc,kBAAC,IAAD,aAO1BA,GAAc,kBAAC,IAAD","file":"static/js/36.3eb22738.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  Box,\n  makeStyles,\n  Typography,\n  Paper,\n  TextField,\n  InputAdornment,\n  IconButton,\n  FormHelperText,\n  Button,\n  Grid,\n} from \"@material-ui/core\";\nimport { Form, Formik } from \"formik\";\nimport * as yep from \"yup\";\nimport { HiEye, HiEyeOff } from \"react-icons/hi\";\nimport { useHistory } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\nimport { useLocation } from \"react-router-dom\";\nimport { patchAPIHandler } from \"src/config/service\";\nimport ButtonCircularProgress from \"src/component/ButtonCircularProgress\";\nimport PageLoading from \"src/component/PageLoading\";\nconst useStyles = makeStyles((theme) => ({\n  paperBox: {\n    padding: \"50px\",\n    [theme.breakpoints.down(\"sm\")]: {\n      padding: \"20px\",\n    },\n  },\n  mainbox: {\n    position: \"relative\",\n    padding: \"40px 0\",\n    zIndex: \"999\",\n\n    [theme.breakpoints.down(\"md\")]: {\n      padding: \"30px 0\",\n    },\n  },\n\n  textBox: {\n    \"& h2\": {\n      color: \"rgba(65, 22, 67, 1)\",\n    },\n  },\n  textheadBox: {\n    paddingBottom: \"9px\",\n    borderBottom: \"1px solid #80808052\",\n    \"& h2\": {\n      fontSize: \"40px\",\n      color: \"rgb(243, 109, 54)\",\n    },\n  },\n  changePassword: {\n    \"& p\": {},\n  },\n\n  subheading: {\n    \"& p\": {\n      // color: theme.palette.primary.main,\n      color: \"#14133b\",\n      fontWeight: \"400\",\n    },\n  },\n}));\n\nexport default function ChangePassword() {\n  const history = useHistory();\n  const classes = useStyles();\n  const location = useLocation();\n  const [showPassword, setShowPassword] = useState(false);\n  const [showPassword1, setShowPassword1] = useState(false);\n  const [showPassword2, setShowPassword2] = useState(false);\n  const [isUpdating, setIsUpdating] = useState(false);\n\n  const formInitialSchema = {\n    oldPassword: \"\",\n    newPassword: \"\",\n    confirmPassword: \"\",\n  };\n\n  const formValidationSchema = yep.object().shape({\n    oldPassword: yep\n      .string()\n      .trim()\n      .matches(\n        /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/,\n        \"Password must be at least 8 characters including one upper case, one lower case, one alphanumeric and one special character.\"\n      )\n      .required(\"Old password is required.\")\n      .min(6, \"Please enter atleast 6 characters\")\n      .max(20, \"You can enter only 30 characters\"),\n    newPassword: yep\n      .string()\n      .trim()\n      .notOneOf(\n        [yep.ref(\"oldPassword\"), null],\n        \"Password cannot be the same as old password.\"\n      )\n      .matches(\n        /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/,\n        \"Password must be at least 8 characters including one upper case, one lower case, one alphanumeric and one special character.\"\n      )\n      .required(\"New password is required.\")\n      .min(6, \"Please enter atleast 6 characters\")\n      .max(20, \"You can enter only 30 characters\"),\n\n    confirmPassword: yep\n      .string()\n      .required(\"Confirm password is required.\")\n      .oneOf(\n        [yep.ref(\"newPassword\"), null],\n        \"Confirm password should match with new password.\"\n      ),\n  });\n\n  const handleFormSubmit = async (values) => {\n    try {\n      setIsUpdating(true);\n      const response = await patchAPIHandler({\n        endPoint: \"changePassword\",\n        dataToSend: {\n          oldPassword: values.oldPassword,\n          newPassword: values.newPassword,\n          confirmPassword: values.confirmPassword,\n        },\n      });\n      if (response.data.responseCode === 200) {\n        window.sessionStorage.setItem(\"token\", response.data.result.token);\n        toast.success(response.data.responseMessage);\n        history.push(\"/edit-profile\");\n      } else {\n        toast.error(response.data.responseMessage);\n      }\n      setIsUpdating(false);\n    } catch (error) {\n      setIsUpdating(false);\n    }\n  };\n\n  return (\n    <Paper elevation={2} className={classes.paperBox}>\n      <Box className={classes.textheadBox}>\n        <Box className=\"displayStart\">\n          <img\n            onClick={() => history.goBack(\"/\")}\n            src=\"/images/arrowback.svg\"\n            width=\"35px\"\n            style={{ cursor: \"pointer\" }}\n          />\n          &nbsp;&nbsp;\n          <Typography variant=\"h2\" style={{ color: \"rgba(243, 109, 54, 1)\" }}>\n            Change Password\n          </Typography>\n        </Box>\n      </Box>\n      <Box className={classes.changePassword}>\n        <Formik\n          initialValues={formInitialSchema}\n          validationSchema={formValidationSchema}\n          onSubmit={(values) => handleFormSubmit(values)}\n        >\n          {({\n            errors,\n            handleBlur,\n            handleChange,\n            handleSubmit,\n            touched,\n            values,\n            setFieldValue,\n          }) => (\n            <Form>\n              <Grid container spacing={2}>\n                <Grid item xs={12} sm={12} md={6}>\n                  <Grid item xs={12}>\n                    <Box mt={2}>\n                      <Typography\n                        mb={1}\n                        variant=\"body2\"\n                        style={{\n                          fontSize: \"18px\",\n                          color: \"rgba(61, 61, 61, 1)\",\n                        }}\n                      >\n                        Old Password\n                      </Typography>\n                      <TextField\n                        fullWidth\n                        variant=\"outlined\"\n                        placeholder=\"Old password\"\n                        type={showPassword2 ? \"text\" : \"password\"}\n                        name=\"oldPassword\"\n                        value={values.oldPassword}\n                        error={Boolean(\n                          touched.oldPassword && errors.oldPassword\n                        )}\n                        onBlur={handleBlur}\n                        onChange={handleChange}\n                        InputProps={{\n                          endAdornment: (\n                            <InputAdornment position=\"end\">\n                              <IconButton\n                                onClick={() => setShowPassword2(!showPassword2)}\n                                edge=\"end\"\n                              >\n                                <Box>\n                                  {showPassword2 ? (\n                                    <HiEye className=\"iconClass1\" />\n                                  ) : (\n                                    <HiEyeOff className=\"iconClass1\" />\n                                  )}\n                                </Box>\n                              </IconButton>\n                            </InputAdornment>\n                          ),\n                        }}\n                      />\n                      <FormHelperText error>\n                        {touched.oldPassword && errors.oldPassword}\n                      </FormHelperText>\n                    </Box>\n                  </Grid>\n                  <Grid item xs={12}>\n                    <Box mt={1}>\n                      <Typography\n                        mb={1}\n                        variant=\"body2\"\n                        style={{\n                          fontSize: \"18px\",\n                          color: \"rgba(61, 61, 61, 1)\",\n                        }}\n                      >\n                        New Password\n                      </Typography>\n                      <TextField\n                        fullWidth\n                        variant=\"outlined\"\n                        placeholder=\"Password\"\n                        type={showPassword ? \"text\" : \"password\"}\n                        name=\"newPassword\"\n                        value={values.newPassword}\n                        error={Boolean(\n                          touched.newPassword && errors.newPassword\n                        )}\n                        onBlur={handleBlur}\n                        onChange={handleChange}\n                        InputProps={{\n                          endAdornment: (\n                            <InputAdornment position=\"end\">\n                              <IconButton\n                                onClick={() => setShowPassword(!showPassword)}\n                                edge=\"end\"\n                              >\n                                <Box>\n                                  {showPassword ? <HiEye /> : <HiEyeOff />}\n                                </Box>\n                              </IconButton>\n                            </InputAdornment>\n                          ),\n                        }}\n                      />\n                      <FormHelperText error>\n                        {touched.newPassword && errors.newPassword}\n                      </FormHelperText>\n                    </Box>\n                  </Grid>\n                  <Grid item xs={12}>\n                    <Box mt={1}>\n                      <Typography\n                        mb={1}\n                        variant=\"body2\"\n                        style={{\n                          fontSize: \"18px\",\n                          color: \"rgba(61, 61, 61, 1)\",\n                        }}\n                      >\n                        Confirm Password\n                      </Typography>\n                      <TextField\n                        fullWidth\n                        variant=\"outlined\"\n                        placeholder=\"Confirm password\"\n                        type={showPassword1 ? \"text\" : \"password\"}\n                        name=\"confirmPassword\"\n                        value={values.confirmPassword}\n                        error={Boolean(\n                          touched.confirmPassword && errors.confirmPassword\n                        )}\n                        onBlur={handleBlur}\n                        onChange={handleChange}\n                        InputProps={{\n                          endAdornment: (\n                            <InputAdornment position=\"end\">\n                              <IconButton\n                                onClick={() => setShowPassword1(!showPassword1)}\n                                edge=\"end\"\n                              >\n                                <Box>\n                                  {showPassword1 ? (\n                                    <HiEye className=\"iconClass1\" />\n                                  ) : (\n                                    <HiEyeOff className=\"iconClass1\" />\n                                  )}\n                                </Box>\n                              </IconButton>\n                            </InputAdornment>\n                          ),\n                        }}\n                      />\n                      <FormHelperText error>\n                        {touched.confirmPassword && errors.confirmPassword}\n                      </FormHelperText>\n                    </Box>\n                  </Grid>\n                </Grid>\n              </Grid>\n\n              <Box className=\"buttonBox\" mt={3}>\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  type=\"submit\"\n                  disabled={isUpdating}\n                >\n                  Update\n                  {isUpdating && <ButtonCircularProgress />}\n                </Button>\n              </Box>\n            </Form>\n          )}\n        </Formik>\n      </Box>\n      {isUpdating && <PageLoading />}\n    </Paper>\n  );\n}\n"],"sourceRoot":""}